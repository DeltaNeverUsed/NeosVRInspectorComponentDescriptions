using System.Collections.Generic;

namespace FunnyNeosInspector
{
    public static class DescDict
    {
        public static readonly Dictionary<string, string> Dict = new Dictionary<string, string>()
        {
            { "AudioExportable/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioExportable/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioExportable/Enabled", "Controls whether or not this component is enabled" },
            { "BinaryExportable/persistent", "Determines whether or not this item will be saved to the server." },
            { "BinaryExportable/UpdateOrder", "Controls the order in which this component is updated" },
            { "BinaryExportable/Enabled", "Controls whether or not this component is enabled" },
            { "TextExportable/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextExportable/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextExportable/Enabled", "Controls whether or not this component is enabled" },
            { "TextureExportable/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextureExportable/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextureExportable/Enabled", "Controls whether or not this component is enabled" },
            { "VideoExportable/persistent", "Determines whether or not this item will be saved to the server." },
            { "VideoExportable/UpdateOrder", "Controls the order in which this component is updated" },
            { "VideoExportable/Enabled", "Controls whether or not this component is enabled" },
            {
                "MainAndMaskTexturePropertyBlock/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MainAndMaskTexturePropertyBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "MainAndMaskTexturePropertyBlock/Enabled", "Controls whether or not this component is enabled" },
            {
                "MainTexturePropertyBlock/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MainTexturePropertyBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "MainTexturePropertyBlock/Enabled", "Controls whether or not this component is enabled" },
            {
                "Projection360PropertyBlock/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "Projection360PropertyBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "Projection360PropertyBlock/Enabled", "Controls whether or not this component is enabled" },
            { "BlurMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "BlurMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "BlurMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "ChannelMatrixMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "ChannelMatrixMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "ChannelMatrixMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "DepthMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "DepthMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "DepthMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "GammaMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "GammaMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "GammaMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "GrayscaleMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrayscaleMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrayscaleMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "HSVMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "HSVMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "HSVMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "InvertMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "InvertMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "InvertMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "LUTMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "LUTMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "LUTMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "PixelateMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "PixelateMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "PixelateMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "PosterizeMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "PosterizeMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "PosterizeMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "RefractMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "RefractMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "RefractMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "ThresholdMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "ThresholdMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "ThresholdMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "PBSLerpMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSLerpMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSLerpMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSLerpSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSLerpSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSLerpSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSColorMaskMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSColorMaskMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSColorMaskMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSColorMaskSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSColorMaskSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSColorMaskSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSColorSplatMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSColorSplatMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSColorSplatMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSColorSplatSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSColorSplatSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSColorSplatSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSDisplaceMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSDisplaceMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDisplaceMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSDisplaceSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSDisplaceSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDisplaceSpecular/Enabled", "Controls whether or not this component is enabled" },
            {
                "PBSDistanceLerpMetallic/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "PBSDistanceLerpMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDistanceLerpMetallic/Enabled", "Controls whether or not this component is enabled" },
            {
                "PBSDistanceLerpSpecular/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "PBSDistanceLerpSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDistanceLerpSpecular/Enabled", "Controls whether or not this component is enabled" },
            {
                "PBSDistanceLerpSpecular/TextureScale",
                "An x/y-coordinate multiplier when translating between UV coordinates and XY coordinates in the textures."
            },
            {
                "PBSDistanceLerpSpecular/TextureOffset",
                "An x/y-coordinate offset when translating between UV coordinates and XY coordinates in the textures."
            },
            {
                "PBSDistanceLerpSpecular/AlbedoColor",
                "If an albedo texture is not provided}, {the constant albedo/diffuse color for the mesh."
            },
            {
                "PBSDistanceLerpSpecular/AlbedoTexture",
                "An optional 2D texture to provide albedo/diffuse data to be UV-mapped onto the mesh."
            },
            {
                "PBSDistanceLerpSpecular/EmissiveColor",
                "If the emissive map is not provided}, {the constant emissive color for the mesh."
            },
            {
                "PBSDistanceLerpSpecular/EmissiveMap",
                "An optional 2D texture to provide emission data to be UV-mapped onto the mesh."
            },
            {
                "PBSDistanceLerpSpecular/NormalMap",
                "An optional 2D texture to provide normal data to be UV-mapped onto the mesh."
            },
            { "PBSDistanceLerpSpecular/NormalScale", "A multiplier for normal data." },
            {
                "PBSDistanceLerpSpecular/OcclusionMap",
                "An optional 2D texture to provide occlusion data to be UV-mapped onto the mesh."
            },
            {
                "PBSDistanceLerpSpecular/Points",
                "A list of (global) positions and tints. The tint is applied to mesh vertices more or less depending on the mesh vertex's distance to the given point, larger distances means less tint."
            },
            { "PBSDualSidedMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSDualSidedMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDualSidedMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSDualSidedSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSDualSidedSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSDualSidedSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSIntersectMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSIntersectMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSIntersectMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSIntersectSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSIntersectSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSIntersectSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSMultiUVMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSMultiUVMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSMultiUVMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSMultiUVSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSMultiUVSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSMultiUVSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSRimMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSRimMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSRimMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSRimSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSRimSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSRimSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSSliceMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSSliceMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSSliceMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSSliceSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSSliceSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSSliceSpecular/Enabled", "Controls whether or not this component is enabled" },
            {
                "PBSStencilMaterialMetallic/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "PBSStencilMaterialMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSStencilMaterialMetallic/Enabled", "Controls whether or not this component is enabled" },
            {
                "PBSStencilMaterialSpecular/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "PBSStencilMaterialSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSStencilMaterialSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSTriplanarMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSTriplanarMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSTriplanarMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSTriplanarSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSTriplanarSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSTriplanarSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSVertexColorMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSVertexColorMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSVertexColorMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSVertexColorSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSVertexColorSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSVertexColorSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "PBSVoronoiCrystal/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSVoronoiCrystal/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSVoronoiCrystal/Enabled", "Controls whether or not this component is enabled" },
            { "GradientSkyMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "GradientSkyMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "GradientSkyMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "GradientSkyMaterial/_shader", "The Shader to use." },
            { "GradientSkyMaterial/BaseColor", "The base color of the sky." },
            { "GradientSkyMaterial/_gradients", "Applies a Gradient to the sky." },
            { "ProceduralSkyMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "ProceduralSkyMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "ProceduralSkyMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "DebugMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "DebugMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "DebugMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "ReflectionMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReflectionMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReflectionMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "UVRectMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "UVRectMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "UVRectMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "TextUnlitMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextUnlitMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextUnlitMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "UIUnlitMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "UIUnlitMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "UIUnlitMaterial/Enabled", "Controls whether or not this component is enabled" },
            {
                "DepthProjectionMaterial/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "DepthProjectionMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "DepthProjectionMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "FresnelLerpMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "FresnelLerpMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "FresnelLerpMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "FresnelMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "FresnelMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "FresnelMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "MatcapMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "MatcapMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "MatcapMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "OverlayFresnelMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "OverlayFresnelMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "OverlayFresnelMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "OverlayUnlitMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "OverlayUnlitMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "OverlayUnlitMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "Projection360Material/persistent", "Determines whether or not this item will be saved to the server." },
            { "Projection360Material/UpdateOrder", "Controls the order in which this component is updated" },
            { "Projection360Material/Enabled", "Controls whether or not this component is enabled" },
            {
                "UnlitDistanceLerpMaterial/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "UnlitDistanceLerpMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "UnlitDistanceLerpMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "UnlitMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "UnlitMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "UnlitMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "WireframeMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "WireframeMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "WireframeMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "FogBoxVolumeMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "FogBoxVolumeMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "FogBoxVolumeMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "VolumeUnlitMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "VolumeUnlitMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "VolumeUnlitMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "FurMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "FurMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "FurMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "PBSMetallic/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSMetallic/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSMetallic/Enabled", "Controls whether or not this component is enabled" },
            { "PBSSpecular/persistent", "Determines whether or not this item will be saved to the server." },
            { "PBSSpecular/UpdateOrder", "Controls the order in which this component is updated" },
            { "PBSSpecular/Enabled", "Controls whether or not this component is enabled" },
            { "XiexeToonMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "XiexeToonMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "XiexeToonMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "XiexeToonMaterial/Outline", "Defines the type of Outline to show on the material." },
            {
                "XiexeToonMaterial/OutlineMask",
                "Determines the areas of an avatar's UV where outlines can appear. White removes them and black adds them."
            },
            { "SawtoothWaveClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "SawtoothWaveClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "SawtoothWaveClip/Enabled", "Controls whether or not this component is enabled" },
            { "SimplexNoiseClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "SimplexNoiseClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "SimplexNoiseClip/Enabled", "Controls whether or not this component is enabled" },
            { "SineWaveClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "SineWaveClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "SineWaveClip/Enabled", "Controls whether or not this component is enabled" },
            { "SquareWaveClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "SquareWaveClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "SquareWaveClip/Enabled", "Controls whether or not this component is enabled" },
            { "TriangleWaveClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "TriangleWaveClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "TriangleWaveClip/Enabled", "Controls whether or not this component is enabled" },
            { "ValueNoiseClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "ValueNoiseClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "ValueNoiseClip/Enabled", "Controls whether or not this component is enabled" },
            { "CheckerboardCubemap/persistent", "Determines whether or not this item will be saved to the server." },
            { "CheckerboardCubemap/UpdateOrder", "Controls the order in which this component is updated" },
            { "CheckerboardCubemap/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicSpriteFont/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicSpriteFont/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicSpriteFont/Enabled", "Controls whether or not this component is enabled" },
            { "BevelSoliPlaneMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BevelSoliPlaneMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BevelSoliPlaneMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BevelSoliRingMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BevelSoliRingMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BevelSoliRingMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BevelSoliStripeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BevelSoliStripeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BevelSoliStripeMesh/Enabled", "Controls whether or not this component is enabled" },
            {
                "MultiBevelSoliStripeMesh/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MultiBevelSoliStripeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiBevelSoliStripeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "ArrowMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "ArrowMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "ArrowMesh/Enabled", "Controls whether or not this component is enabled" },
            { "ArrowMesh/BodyRadius", "Determines the thickness of the base under the arrow." },
            { "ArrowMesh/HeadRadius", "Determines the radious of the arrows head's base." },
            { "ArrowMesh/HeadLength", "Determines the length of the arrow's head." },
            { "ArrowMesh/MinimalBodyLength", "Determines the arrow's length." },
            { "BallisticPathMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BallisticPathMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BallisticPathMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BentTubeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BentTubeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BentTubeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BevelBoxMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BevelBoxMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BevelBoxMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BevelBoxMesh/Size", "The 3-Dimentional scale of the mesh." },
            { "BevelBoxMesh/Bevel", "Size of the rounded edges." },
            { "BezierTubeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BezierTubeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BezierTubeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BoxArrayMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxArrayMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxArrayMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BoxMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxMesh/Enabled", "Controls whether or not this component is enabled" },
            { "BoxMesh/Size", "The size of the mesh" },
            { "CameraFrustumMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CameraFrustumMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CameraFrustumMesh/Enabled", "Controls whether or not this component is enabled" },
            { "CameraFrustumMesh/Orientation", "Direction the mesh is facing." },
            { "CameraFrustumMesh/Near", "Slices the mesh to demonstrate camera nearclip" },
            { "CameraFrustumMesh/Far", "Expands the mesh to demonstrate camera farclip." },
            { "CameraFrustumMesh/DualSided", "Enables the mesh to be dual sided." },
            { "CapsuleMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CapsuleMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CapsuleMesh/Enabled", "Controls whether or not this component is enabled" },
            { "CapsuleMesh/Radius", "Determines the roundness of the mesh." },
            { "CapsuleMesh/Height", "Determines how tall the mesh is." },
            { "CapsuleMesh/Segments", "Determines the smoothness." },
            { "CapsuleMesh/Rings", "Determines the smoothness of the top & bottom of the mesh." },
            { "CapsuleMesh/Shading", "Changes the mesh shading." },
            { "CapsuleMesh/DualSided", "Makes the mesh dual sided." },
            { "CircleMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CircleMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CircleMesh/Enabled", "Controls whether or not this component is enabled" },
            { "ConeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "ConeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "ConeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "ConeMesh/Height", "Determines the height of the cone." },
            { "ConeMesh/RadiusBase", "Determines the width of the cone's base." },
            { "ConeMesh/RadiusTop", "Determines the width from the top of the cone." },
            { "ConeMesh/Sides", "How smooth the roundness of the mesh." },
            { "ConeMesh/FlatShading", "Toggles mesh smooth shading." },
            { "CrossMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CrossMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CrossMesh/Enabled", "Controls whether or not this component is enabled" },
            { "CurvedPlaneMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CurvedPlaneMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CurvedPlaneMesh/Enabled", "Controls whether or not this component is enabled" },
            { "CylinderMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "CylinderMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "CylinderMesh/Enabled", "Controls whether or not this component is enabled" },
            { "FrameMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "FrameMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "FrameMesh/Enabled", "Controls whether or not this component is enabled" },
            { "GridMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "GridMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "GridMesh/Enabled", "Controls whether or not this component is enabled" },
            { "HollowConeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "HollowConeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "HollowConeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "IcoSphereMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "IcoSphereMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "IcoSphereMesh/Enabled", "Controls whether or not this component is enabled" },
            { "IcoSphereMesh/Radius", "Radius of the IcoSphere" },
            {
                "IcoSphereMesh/Subdivisions", "Number of IcoSphere subdivisions — Values are clamped in the range [0,8]"
            },
            { "IcoSphereMesh/FlatShading", "Use flat/faceted shading instead of smooth shading." },
            {
                "IcoSphereMesh/FlatFaceExtrude",
                "Distance to extrude faces after being generated. Creates an \"Exploded\" appearance"
            },
            { "IcoSphereMesh/FlatFaceScale", "Scale of individual faces}, {relative to their base size." },
            {
                "ImageColorDistributionGraph/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "ImageColorDistributionGraph/UpdateOrder", "Controls the order in which this component is updated" },
            { "ImageColorDistributionGraph/Enabled", "Controls whether or not this component is enabled" },
            { "LabelPointerMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "LabelPointerMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "LabelPointerMesh/Enabled", "Controls whether or not this component is enabled" },
            { "LightningMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "LightningMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "LightningMesh/Enabled", "Controls whether or not this component is enabled" },
            { "MultiLineMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "MultiLineMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiLineMesh/Enabled", "Controls whether or not this component is enabled" },
            { "MultiSegmentMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "MultiSegmentMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiSegmentMesh/Enabled", "Controls whether or not this component is enabled" },
            { "PointClusterMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "PointClusterMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "PointClusterMesh/Enabled", "Controls whether or not this component is enabled" },
            { "PointMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "PointMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "PointMesh/Enabled", "Controls whether or not this component is enabled" },
            { "QuadArrayMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "QuadArrayMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "QuadArrayMesh/Enabled", "Controls whether or not this component is enabled" },
            { "QuadMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "QuadMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "QuadMesh/Enabled", "Controls whether or not this component is enabled" },
            { "RampMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "RampMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "RampMesh/Enabled", "Controls whether or not this component is enabled" },
            { "RingMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "RingMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "RingMesh/Enabled", "Controls whether or not this component is enabled" },
            { "SegmentMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "SegmentMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "SegmentMesh/Enabled", "Controls whether or not this component is enabled" },
            { "SlotSegmentMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "SlotSegmentMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "SlotSegmentMesh/Enabled", "Controls whether or not this component is enabled" },
            { "SphereMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "SphereMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "SphereMesh/Enabled", "Controls whether or not this component is enabled" },
            { "SpiralTubeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "SpiralTubeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "SpiralTubeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "StandaloneRectMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "StandaloneRectMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "StandaloneRectMesh/Enabled", "Controls whether or not this component is enabled" },
            { "StripeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "StripeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "StripeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "StripeWireMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "StripeWireMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "StripeWireMesh/Enabled", "Controls whether or not this component is enabled" },
            { "TorusMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "TorusMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "TorusMesh/Enabled", "Controls whether or not this component is enabled" },
            { "TriangleMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "TriangleMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "TriangleMesh/Enabled", "Controls whether or not this component is enabled" },
            { "TubeBoxMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "TubeBoxMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "TubeBoxMesh/Enabled", "Controls whether or not this component is enabled" },
            { "TubeMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "TubeMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "TubeMesh/Enabled", "Controls whether or not this component is enabled" },
            { "WrapperMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "WrapperMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "WrapperMesh/Enabled", "Controls whether or not this component is enabled" },
            { "AudioWaveformTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioWaveformTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioWaveformTexture/Enabled", "Controls whether or not this component is enabled" },
            { "GradientStripTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "GradientStripTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "GradientStripTexture/Enabled", "Controls whether or not this component is enabled" },
            { "GridTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "GridTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "GridTexture/Enabled", "Controls whether or not this component is enabled" },
            { "NoiseTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "NoiseTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "NoiseTexture/Enabled", "Controls whether or not this component is enabled" },
            { "SimplexTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "SimplexTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "SimplexTexture/Enabled", "Controls whether or not this component is enabled" },
            { "SolidColorTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "SolidColorTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "SolidColorTexture/Enabled", "Controls whether or not this component is enabled" },
            { "StringQRCodeTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "StringQRCodeTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "StringQRCodeTexture/Enabled", "Controls whether or not this component is enabled" },
            { "UVTexture/persistent", "Determines whether or not this item will be saved to the server." },
            { "UVTexture/UpdateOrder", "Controls the order in which this component is updated" },
            { "UVTexture/Enabled", "Controls whether or not this component is enabled" },
            {
                "HierarchyMaterialTarget/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "HierarchyMaterialTarget/UpdateOrder", "Controls the order in which this component is updated" },
            { "HierarchyMaterialTarget/Enabled", "Controls whether or not this component is enabled" },
            { "MaterialApplyPolicy/persistent", "Determines whether or not this item will be saved to the server." },
            { "MaterialApplyPolicy/UpdateOrder", "Controls the order in which this component is updated" },
            { "MaterialApplyPolicy/Enabled", "Controls whether or not this component is enabled" },
            { "MaterialRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "MaterialRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "MaterialRelay/Enabled", "Controls whether or not this component is enabled" },
            {
                "MeshRendererMaterialRelay/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MeshRendererMaterialRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "MeshRendererMaterialRelay/Enabled", "Controls whether or not this component is enabled" },
            { "AssetLoader/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetLoader/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetLoader/Enabled", "Controls whether or not this component is enabled" },
            { "AssetMultiplexer/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetMultiplexer/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetMultiplexer/Enabled", "Controls whether or not this component is enabled" },
            { "AssetMultiplexer/Target", "The field to drive." },
            { "AssetMultiplexer/Index", "Which element in Assets to drive to Target" },
            { "AssetMultiplexer/Assets", "The list of assets to multiplex between." },
            { "AudioClipAssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioClipAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioClipAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "ClipboardImporter/persistent", "Determines whether or not this item will be saved to the server." },
            { "ClipboardImporter/UpdateOrder", "Controls the order in which this component is updated" },
            { "ClipboardImporter/Enabled", "Controls whether or not this component is enabled" },
            { "CubemapAssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "CubemapAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "CubemapAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            {
                "ITexture2DAssetMetadata/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "ITexture2DAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "ITexture2DAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "MaterialAssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "MaterialAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "MaterialAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "MeshAssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "MeshAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "MeshAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "Texture2DAssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "Texture2DAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "Texture2DAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            {
                "VideoTextureAssetMetadata/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "VideoTextureAssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "VideoTextureAssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "DesktopTextureProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "DesktopTextureProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "DesktopTextureProvider/Enabled", "Controls whether or not this component is enabled" },
            { "NullTextureProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "NullTextureProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "NullTextureProvider/Enabled", "Controls whether or not this component is enabled" },
            { "RenderTextureProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "RenderTextureProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "RenderTextureProvider/Enabled", "Controls whether or not this component is enabled" },
            { "RenderTextureProvider/Size", "The size the camera renders in width and height" },
            { "SpriteProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "SpriteProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "SpriteProvider/Enabled", "Controls whether or not this component is enabled" },
            { "SpriteProvider/Texture", "The sprite to provide." },
            {
                "SpriteProvider/Rect",
                "The rectangle within the sprite to render. Note that the second x and y are actually the width and height of the Rect. The values are proportions of the width and height of the image in the Texture property."
            },
            {
                "StaticAnimationProvider/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "StaticAnimationProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticAnimationProvider/Enabled", "Controls whether or not this component is enabled" },
            { "StaticAudioClip/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticAudioClip/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticAudioClip/Enabled", "Controls whether or not this component is enabled" },
            { "StaticBinary/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticBinary/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticBinary/Enabled", "Controls whether or not this component is enabled" },
            { "StaticCubeMap/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticCubeMap/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticCubeMap/Enabled", "Controls whether or not this component is enabled" },
            { "StaticFont/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticFont/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticFont/Enabled", "Controls whether or not this component is enabled" },
            { "StaticLocaleProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticLocaleProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticLocaleProvider/Enabled", "Controls whether or not this component is enabled" },
            { "StaticMesh/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticMesh/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticMesh/Enabled", "Controls whether or not this component is enabled" },
            { "StaticMesh/URL", "The Uri pointing to the .meshx asset to be loaded" },
            {
                "StaticSavedObjectProvider/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "StaticSavedObjectProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticSavedObjectProvider/Enabled", "Controls whether or not this component is enabled" },
            { "StaticSavedObjectProvider/URL", "Enter the Uri (e.g. neosrec,///) link of the saved object" },
            { "StaticShader/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticShader/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticShader/Enabled", "Controls whether or not this component is enabled" },
            { "StaticTexture2D/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticTexture2D/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticTexture2D/Enabled", "Controls whether or not this component is enabled" },
            { "StaticTexture2D/URL", "The Asset URI that references the raw texture data" },
            { "StaticTexture2D/IsNormalMap", "This texture should be interpreted as a Normal Map" },
            { "StaticTexture2D/FilterMode", "The type of filtering to use for this texture." },
            {
                "StaticTexture2D/AnisotropicLevel",
                "The level of anisotropy to use when TextureFilterMode is set to Anisotropic"
            },
            { "StaticTexture2D/WrapModeU", "How to handle U values outside of the range [0.0,1.0]" },
            { "StaticTexture2D/WrapModeV", "How to handle V values outisde of the range [0.0,1.0]" },
            { "StaticTexture2D/Uncompressed", "Do not use texture compression" },
            { "StaticTexture2D/MipMapBias", "Offset to the MipMap calculation." },
            { "StaticTexture3D/persistent", "Determines whether or not this item will be saved to the server." },
            { "StaticTexture3D/UpdateOrder", "Controls the order in which this component is updated" },
            { "StaticTexture3D/Enabled", "Controls whether or not this component is enabled" },
            { "VideoTextureProvider/persistent", "Determines whether or not this item will be saved to the server." },
            { "VideoTextureProvider/UpdateOrder", "Controls the order in which this component is updated" },
            { "VideoTextureProvider/Enabled", "Controls whether or not this component is enabled" },
            { "AudioDeviceIndexFinder/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioDeviceIndexFinder/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioDeviceIndexFinder/Enabled", "Controls whether or not this component is enabled" },
            { "AudioInputDeviceInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioInputDeviceInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioInputDeviceInfo/Enabled", "Controls whether or not this component is enabled" },
            { "AudioOutputDeviceInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioOutputDeviceInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioOutputDeviceInfo/Enabled", "Controls whether or not this component is enabled" },
            { "AudioClipPlayer/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioClipPlayer/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioClipPlayer/Enabled", "Controls whether or not this component is enabled" },
            { "AudioClipPlayer/Clip", "The AudioClip to play. This can be a StaticAudioClip." },
            { "AudioOutput/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioOutput/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioOutput/Enabled", "Controls whether or not this component is enabled" },
            { "AudioOutput/Volume", "The volume to play the clip at}, {from 0 to 1." },
            {
                "AudioOutput/Source",
                "The source of audio. Can be an AudioClipPlayer}, {LerpingMultiClipPlayer}, {or MultiAudioClipPlayer."
            },
            { "AudioOutput/SpatialBlend", "Blends the the audio between 3D & 2D." },
            { "AudioOutput/Spatialize", "Enables or disables rather it's 3D or 2D." },
            { "AudioOutput/DopplerLevel", "Simulates audio distortion when you or the object is moving." },
            { "AudioOutput/RolloffMode", "Switches between logarithmic and Linear audio falloff." },
            { "AudioOutput/MinDistance", "Minimum distance you need to be from the source to hear the audio." },
            { "AudioOutput/MaxDistance", "Maximum distance from the source until you no longer hear the audio." },
            {
                "AudioOutput/AudioTypeGroup",
                "Changes what track of Audio the source should be. SoundEffects}, {Multimedia}, {Voice}, {User Interface."
            },
            {
                "AudioOutput/DistanceSpace",
                "Chooses rather the audio should use it's local scale or it's global scale."
            },
            { "AudioOutput/IgnoreReverbZones", "If the Audio Source should ignore Reverb Zones." },
            { "AudioOutput/excludedUsers", "User references placed in here will be excluded from hearing the audio." },
            { "AudioReverbZone/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioReverbZone/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioReverbZone/Enabled", "Controls whether or not this component is enabled" },
            { "LerpingMultiClipPlayer/persistent", "Determines whether or not this item will be saved to the server." },
            { "LerpingMultiClipPlayer/UpdateOrder", "Controls the order in which this component is updated" },
            { "LerpingMultiClipPlayer/Enabled", "Controls whether or not this component is enabled" },
            { "MultiAudioClipPlayer/persistent", "Determines whether or not this item will be saved to the server." },
            { "MultiAudioClipPlayer/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiAudioClipPlayer/Enabled", "Controls whether or not this component is enabled" },
            { "CloudServerStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "CloudServerStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudServerStatus/Enabled", "Controls whether or not this component is enabled" },
            { "CloudUserInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "CloudUserInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudUserInfo/Enabled", "Controls whether or not this component is enabled" },
            { "CloudUserInfo/UserId", "The ID of the user that this component should display information about" },
            { "CloudUserInfo/IsLoaded", "Whether or not the given user's information has been loaded" },
            { "CloudUserInfo/Username", "The name of the given user" },
            { "CloudUserInfo/RegistrationDate", "The time that the given user registered their account" },
            { "CloudUserInfo/IconURL", "A URL}, {pointing to the user's profile picture" },
            { "CloudUserInfo/IsContact", "Whether or not this user is one of your contacts (only works in userspace)" },
            {
                "CloudUserInfo/_loadedUserId",
                "The user ID corresponding to the information this component is currently outputting. This is an internal value and shouldn't be edited manually."
            },
            { "CreditsStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "CreditsStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "CreditsStatus/Enabled", "Controls whether or not this component is enabled" },
            { "OnlineUsersCount/persistent", "Determines whether or not this item will be saved to the server." },
            { "OnlineUsersCount/UpdateOrder", "Controls the order in which this component is updated" },
            { "OnlineUsersCount/Enabled", "Controls whether or not this component is enabled" },
            { "RecordSyncStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "RecordSyncStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "RecordSyncStatus/Enabled", "Controls whether or not this component is enabled" },
            { "StorageUsageStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "StorageUsageStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "StorageUsageStatus/Enabled", "Controls whether or not this component is enabled" },
            { "UserOnlineStatusSync/persistent", "Determines whether or not this item will be saved to the server." },
            { "UserOnlineStatusSync/UpdateOrder", "Controls the order in which this component is updated" },
            { "UserOnlineStatusSync/Enabled", "Controls whether or not this component is enabled" },
            { "ActiveUserCloudField/persistent", "Determines whether or not this item will be saved to the server." },
            { "ActiveUserCloudField/UpdateOrder", "Controls the order in which this component is updated" },
            { "ActiveUserCloudField/Enabled", "Controls whether or not this component is enabled" },
            {
                "ActiveUserCloudValueVariable/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "ActiveUserCloudValueVariable/UpdateOrder", "Controls the order in which this component is updated" },
            { "ActiveUserCloudValueVariable/Enabled", "Controls whether or not this component is enabled" },
            { "CloudValueField/persistent", "Determines whether or not this item will be saved to the server." },
            { "CloudValueField/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudValueField/Enabled", "Controls whether or not this component is enabled" },
            {
                "CloudValueVariableDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "CloudValueVariableDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudValueVariableDriver/Enabled", "Controls whether or not this component is enabled" },
            { "CloudValueVariable/persistent", "Determines whether or not this item will be saved to the server." },
            { "CloudValueVariable/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudValueVariable/Enabled", "Controls whether or not this component is enabled" },
            {
                "CloudStorageSpaceIndicator/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "CloudStorageSpaceIndicator/UpdateOrder", "Controls the order in which this component is updated" },
            { "CloudStorageSpaceIndicator/Enabled", "Controls whether or not this component is enabled" },
            { "FriendLink/persistent", "Determines whether or not this item will be saved to the server." },
            { "FriendLink/UpdateOrder", "Controls the order in which this component is updated" },
            { "FriendLink/Enabled", "Controls whether or not this component is enabled" },
            { "HomeGroupOrbManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "HomeGroupOrbManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "HomeGroupOrbManager/Enabled", "Controls whether or not this component is enabled" },
            { "InventoryLink/persistent", "Determines whether or not this item will be saved to the server." },
            { "InventoryLink/UpdateOrder", "Controls the order in which this component is updated" },
            { "InventoryLink/Enabled", "Controls whether or not this component is enabled" },
            {
                "OneTimeVideoPlayerTrigger/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "OneTimeVideoPlayerTrigger/UpdateOrder", "Controls the order in which this component is updated" },
            { "OneTimeVideoPlayerTrigger/Enabled", "Controls whether or not this component is enabled" },
            { "PatreonSkyController/persistent", "Determines whether or not this item will be saved to the server." },
            { "PatreonSkyController/UpdateOrder", "Controls the order in which this component is updated" },
            { "PatreonSkyController/Enabled", "Controls whether or not this component is enabled" },
            { "SessionOrbsController/persistent", "Determines whether or not this item will be saved to the server." },
            { "SessionOrbsController/UpdateOrder", "Controls the order in which this component is updated" },
            { "SessionOrbsController/Enabled", "Controls whether or not this component is enabled" },
            { "WorldSubmitter/persistent", "Determines whether or not this item will be saved to the server." },
            { "WorldSubmitter/UpdateOrder", "Controls the order in which this component is updated" },
            { "WorldSubmitter/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonAudioDeviceSet/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonAudioDeviceSet/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonAudioDeviceSet/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonActionTrigger/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonActionTrigger/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonActionTrigger/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonActionTrigger/OnPressed", "Triggered when the button is pressed" },
            { "ButtonActionTrigger/OnPressing", "Triggered when the button is pressed}, {before the OnPressed event" },
            { "ButtonActionTrigger/OnReleased", "Triggered when the button is released" },
            { "ButtonEnumShift/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonEnumShift/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonEnumShift/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonHoverEventRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonHoverEventRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonHoverEventRelay/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonPlaybackAction/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonPlaybackAction/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonPlaybackAction/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonPlaybackAction/OnHover", "The action to take when the button is hovered over." },
            { "ButtonPlaybackAction/OnLeave", "The action to take when the button is left." },
            { "ButtonPlaybackAction/OnPress", "The action to take when the button is pressed." },
            { "ButtonPlaybackAction/OnRelease", "The action to take when the button is released." },
            { "ButtonPlaybackSeeker/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonPlaybackSeeker/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonPlaybackSeeker/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonPressEventRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonPressEventRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonPressEventRelay/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonReferenceCycle/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonReferenceCycle/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonReferenceCycle/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonReferenceSet/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonReferenceSet/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonReferenceSet/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonStringAppend/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonStringAppend/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonStringAppend/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonStringAppend/TargetString", "The string to which AppendString will be added." },
            { "ButtonStringAppend/AppendString", "The string to add to TargetString." },
            {
                "ButtonStringAppend/AppendInFront",
                "Whether or not to add AppendString to the beginning of the string. (This does not reverse AppendString.)"
            },
            { "ButtonStringErase/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonStringErase/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonStringErase/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonStringErase/TargetString", "The string from which characters will be removed." },
            { "ButtonStringErase/Count", "How many characters to remove." },
            {
                "ButtonStringErase/EraseFromBeginning",
                "Whether or not to remove characters from the beginning of the string."
            },
            { "ButtonToggle/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonToggle/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonToggle/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonToggle/TargetValue", "The boolean to invert whenever the button is pressed." },
            { "ButtonValueShift/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonValueShift/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonValueShift/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonValueShift/TargetValue", "The value to shift." },
            { "ButtonValueShift/Delta", "By how much TargetValue should be shifted on each press." },
            { "ButtonValueShift/Min", "The minimum value that can be shifted to." },
            { "ButtonValueShift/Max", "The maximum value that can be shifted to." },
            {
                "ButtonValueShift/WrapAround",
                "Whether or not the value should wrap around to the other extreme when reaching either Min or Max."
            },
            { "Perspective360Panner/persistent", "Determines whether or not this item will be saved to the server." },
            { "Perspective360Panner/UpdateOrder", "Controls the order in which this component is updated" },
            { "Perspective360Panner/Enabled", "Controls whether or not this component is enabled" },
            {
                "ReferenceOptionDescriptionDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "ReferenceOptionDescriptionDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceOptionDescriptionDriver/Enabled", "Controls whether or not this component is enabled" },
            { "FloatTextEditorParser/persistent", "Determines whether or not this item will be saved to the server." },
            { "FloatTextEditorParser/UpdateOrder", "Controls the order in which this component is updated" },
            { "FloatTextEditorParser/Enabled", "Controls whether or not this component is enabled" },
            { "FloatTextEditorParser/ParsedValue", "The value that was read from the text field." },
            { "FloatTextEditorParser/Min", "The minimum value that can be read." },
            { "FloatTextEditorParser/Max", "The maximum value that can be read." },
            { "FloatTextEditorParser/DecimalPlaces", "The amount of decimal places that can be read." },
            { "IntTextEditorParser/persistent", "Determines whether or not this item will be saved to the server." },
            { "IntTextEditorParser/UpdateOrder", "Controls the order in which this component is updated" },
            { "IntTextEditorParser/Enabled", "Controls whether or not this component is enabled" },
            { "IntTextEditorParser/ParsedValue", "The value that was read from the text field." },
            { "IntTextEditorParser/Min", "The minimum value that can be read." },
            { "IntTextEditorParser/Max", "The maximum value that can be read." },
            { "TextEditor/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextEditor/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextEditor/Enabled", "Controls whether or not this component is enabled" },
            { "TouchableTextField/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchableTextField/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchableTextField/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonDelegateRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonDelegateRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonDelegateRelay/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonHoverRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonHoverRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonHoverRelay/Enabled", "Controls whether or not this component is enabled" },
            { "ButtonRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ButtonRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ButtonRelay/Enabled", "Controls whether or not this component is enabled" },
            { "PagingControl/persistent", "Determines whether or not this item will be saved to the server." },
            { "PagingControl/UpdateOrder", "Controls the order in which this component is updated" },
            { "PagingControl/Enabled", "Controls whether or not this component is enabled" },
            { "ConfirmationHandler/persistent", "Determines whether or not this item will be saved to the server." },
            { "ConfirmationHandler/UpdateOrder", "Controls the order in which this component is updated" },
            { "ConfirmationHandler/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicField/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicField/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicField/Enabled", "Controls whether or not this component is enabled" },
            {
                "DynamicReferenceVariableDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "DynamicReferenceVariableDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicReferenceVariableDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "DynamicReferenceVariableReset/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "DynamicReferenceVariableReset/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicReferenceVariableReset/Enabled", "Controls whether or not this component is enabled" },
            {
                "DynamicReferenceVariable/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "DynamicReferenceVariable/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicReferenceVariable/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicReference/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicReference/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicReference/Enabled", "Controls whether or not this component is enabled" },
            {
                "DynamicValueVariableDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "DynamicValueVariableDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicValueVariableDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "DynamicValueVariableReset/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "DynamicValueVariableReset/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicValueVariableReset/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicValueVariable/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicValueVariable/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicValueVariable/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicVariableSpace/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicVariableSpace/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicVariableSpace/Enabled", "Controls whether or not this component is enabled" },
            { "DynamicVariableSpace/SpaceName", "The name of the space." },
            {
                "DynamicVariableSpace/OnlyDirectBinding",
                "When enabled}, {variables won't be bound to this space unless they specify it by name, <spacename>/<varname>."
            },
            { "DynamicVariableStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "DynamicVariableStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicVariableStatus/Enabled", "Controls whether or not this component is enabled" },
            { "DataPreset/persistent", "Determines whether or not this item will be saved to the server." },
            { "DataPreset/UpdateOrder", "Controls the order in which this component is updated" },
            { "DataPreset/Enabled", "Controls whether or not this component is enabled" },
            { "DataPreset/IsActive", "Indicates that all the presets in Entries have been applied. Cannot be driven." },
            { "DataPreset/Entries", "A list of data preset references and values." },
            { "DataPresetReference/persistent", "Determines whether or not this item will be saved to the server." },
            { "DataPresetReference/UpdateOrder", "Controls the order in which this component is updated" },
            { "DataPresetReference/Enabled", "Controls whether or not this component is enabled" },
            {
                "DataPresetReference/PresetReference",
                "The field reference for the preset. Since this is a generic component}, {it can be used with any type of reference."
            },
            {
                "DataPresetReference/TargetReference",
                "A reference to the reference field of the same type as PresetReference."
            },
            { "DataPresetValue/persistent", "Determines whether or not this item will be saved to the server." },
            { "DataPresetValue/UpdateOrder", "Controls the order in which this component is updated" },
            { "DataPresetValue/Enabled", "Controls whether or not this component is enabled" },
            {
                "DataPresetValue/PresetValue",
                "The value for the preset. Float is used as an example. Since this is a generic component}, {it can be used with any value."
            },
            { "DataPresetValue/TargetField", "A reference to the field of the same type as PresetValue." },
            { "AudioMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "FileMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "FileMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "FileMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "PhotoMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "PhotoMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "PhotoMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceField/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceField/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceField/Enabled", "Controls whether or not this component is enabled" },
            { "TypeField/persistent", "Determines whether or not this item will be saved to the server." },
            { "TypeField/UpdateOrder", "Controls the order in which this component is updated" },
            { "TypeField/Enabled", "Controls whether or not this component is enabled" },
            { "ValueField/persistent", "Determines whether or not this item will be saved to the server." },
            { "ValueField/UpdateOrder", "Controls the order in which this component is updated" },
            { "ValueField/Enabled", "Controls whether or not this component is enabled" },
            { "CharacterEventTrigger/persistent", "Determines whether or not this item will be saved to the server." },
            { "CharacterEventTrigger/UpdateOrder", "Controls the order in which this component is updated" },
            { "CharacterEventTrigger/Enabled", "Controls whether or not this component is enabled" },
            {
                "CharacterEventTrigger/TriggerEntered",
                "Triggered when a user enters a collider attached to the parent slot"
            },
            {
                "CharacterEventTrigger/TriggerLeft",
                "Triggered when a user exits a collider attached to the parent slot"
            },
            {
                "CharacterEventTrigger/IgnoreParentUser",
                "If this component is under a user in the hierarchy}, {events from that user are ignored."
            },
            { "CharacterTeleporter/persistent", "Determines whether or not this item will be saved to the server." },
            { "CharacterTeleporter/UpdateOrder", "Controls the order in which this component is updated" },
            { "CharacterTeleporter/Enabled", "Controls whether or not this component is enabled" },
            { "PhysicalLocomotion/persistent", "Determines whether or not this item will be saved to the server." },
            { "PhysicalLocomotion/UpdateOrder", "Controls the order in which this component is updated" },
            { "PhysicalLocomotion/Enabled", "Controls whether or not this component is enabled" },
            { "PhysicalLocomotion/Gripping", "See #Gripping for more information" },
            { "PhysicalLocomotion/GripOnHold", "See #Gripping for more information" },
            { "PhysicalLocomotion/GripRadius", "See #Gripping for more information" },
            { "PhysicalLocomotion/GripVelocityMultiplier", "See #Gripping for more information" },
            { "PhysicalLocomotion/GripHandRotationMode", "See #Gripping for more information" },
            { "PhysicalLocomotion/GripObjectRotationMode", "See #Gripping for more information" },
            { "PhysicalLocomotion/HandGripRotationSmoothSpeed", "See #Gripping for more information" },
            { "RandomAudioClipPlayer/persistent", "Determines whether or not this item will be saved to the server." },
            { "RandomAudioClipPlayer/UpdateOrder", "Controls the order in which this component is updated" },
            { "RandomAudioClipPlayer/Enabled", "Controls whether or not this component is enabled" },
            { "RandomAudioClipPlayer/RolloffMode", "An optional AudioRolloffMode" },
            { "RandomAudioClipPlayer/Clips", "The list of ClipData to choose from}, {randomly with weights." },
            { "License/persistent", "Determines whether or not this item will be saved to the server." },
            { "License/UpdateOrder", "Controls the order in which this component is updated" },
            { "License/Enabled", "Controls whether or not this component is enabled" },
            {
                "License/RequireCredit",
                "If true}, {this license allows reusers to distribute}, {remix}, {adapt}, {and build upon the object that this component is attached to}, {in any medium or format}, {so long as attribution is given to the creator}, {as specified in the CreditString. Corresponds to any CC-BY Creative Commons license."
            },
            { "License/CreditString", "The attribution required}, {if RequireCredit is true." },
            { "License/CanExport", "Whether the license allows export out of Neos." },
            { "WebsocketClient/persistent", "Determines whether or not this item will be saved to the server." },
            { "WebsocketClient/UpdateOrder", "Controls the order in which this component is updated" },
            { "WebsocketClient/Enabled", "Controls whether or not this component is enabled" },
            { "WebsocketClient/URL", "The Websocket server to target - either secure (wss,//) or insecure (ws,//)" },
            {
                "WebsocketClient/User",
                "The user who will be responsible for establishing the connection}, {and transmitting data."
            },
            { "WebsocketClient/_machineId", "Automatically Assigned - The machineId of User" },
            { "WebsocketClient/_userId", "Automatically Assigned - The userId of User" },
            {
                "WebsocketClient/AccessReason",
                "A descriptive string explaining why this connection request should be granted"
            },
            {
                "WebsocketClient/ConnectRetryInterval",
                "How often to retry the connection}, {if it fails for reasons other than being rejected by the user."
            },
            {
                "WebsocketClient/IsConnected",
                "A read-only value indicating if this client has successfully connected to the target specified in URL"
            },
            {
                "AvatarObjectPermissions/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "AvatarObjectPermissions/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarObjectPermissions/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarObjectPermissions/Mode", "Controls what filtering mode is applied to List" },
            {
                "AvatarObjectPermissions/List",
                "Tags which determine the allowed or disallowed equpability dependant on the Mode"
            },
            { "CameraPermissions/persistent", "Determines whether or not this item will be saved to the server." },
            { "CameraPermissions/UpdateOrder", "Controls the order in which this component is updated" },
            { "CameraPermissions/Enabled", "Controls whether or not this component is enabled" },
            { "CameraPermissions/CameraModeFilterMode", "Whether to allow or disallow the CameraModes" },
            {
                "CameraPermissions/CameraModes",
                "List of Camera modes which decide how the camera looks at users/the world."
            },
            {
                "CameraPermissions/AllowFramingOtherUsers",
                "Determines whether focusing the camera on other user is allowed."
            },
            { "CommonToolPermissions/persistent", "Determines whether or not this item will be saved to the server." },
            { "CommonToolPermissions/UpdateOrder", "Controls the order in which this component is updated" },
            { "CommonToolPermissions/Enabled", "Controls whether or not this component is enabled" },
            {
                "CommonToolPermissions/AllowOnlyWhitelistedTools",
                "Whether only tools which are set to Allow are are allowed to be equipped."
            },
            { "CommonToolPermissions/TooltipRules", "List of ToolTipRules." },
            { "BoxCollider/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxCollider/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxCollider/Enabled", "Controls whether or not this component is enabled" },
            { "MeshCollider/persistent", "Determines whether or not this item will be saved to the server." },
            { "MeshCollider/UpdateOrder", "Controls the order in which this component is updated" },
            { "MeshCollider/Enabled", "Controls whether or not this component is enabled" },
            { "ColliderUserTracker/persistent", "Determines whether or not this item will be saved to the server." },
            { "ColliderUserTracker/UpdateOrder", "Controls the order in which this component is updated" },
            { "ColliderUserTracker/Enabled", "Controls whether or not this component is enabled" },
            {
                "ColliderUserTracker/IsLocalUserInside",
                "Becomes set for the local user if the local user is within the collider of the object that this component is attached to."
            },
            {
                "ColliderUserTracker/IsAnyUserInside",
                "Becomes set for all users if any user is within the collider of the object that this component is attached to."
            },
            {
                "ColliderUserTracker/NumberOfUsersInside",
                "Tracks the number of users inside the collider of the object that this component is attached to."
            },
            {
                "ColliderUserTracker/_usersInside",
                "Data on the users that are inside the collider of the object that this component is attached to."
            },
            { "CharacterController/persistent", "Determines whether or not this item will be saved to the server." },
            { "CharacterController/UpdateOrder", "Controls the order in which this component is updated" },
            { "CharacterController/Enabled", "Controls whether or not this component is enabled" },
            { "ContextMenuItemSource/persistent", "Determines whether or not this item will be saved to the server." },
            { "ContextMenuItemSource/UpdateOrder", "Controls the order in which this component is updated" },
            { "ContextMenuItemSource/Enabled", "Controls whether or not this component is enabled" },
            { "ContextMenuItemSource/Label", "The text label next to the item." },
            { "ContextMenuItemSource/Color", "The background/border color of the item." },
            { "ContextMenuItemSource/Sprite", "The icon that is displayed on the item." },
            {
                "ContextMenuItemSource/ButtonEnabled",
                "Whether or not the button is active. If false}, {it will be greyed out and unclickable."
            },
            {
                "ContextMenuItemSource/AllowDrag",
                "Whether or not the user can drag onto the button from the center of the context menu to click it."
            },
            {
                "ContextMenuItemSource/CloseMenuOnPress",
                "Whether or not the context menu should be closed after the item is pressed."
            },
            { "ContextMenuSubmenu/persistent", "Determines whether or not this item will be saved to the server." },
            { "ContextMenuSubmenu/UpdateOrder", "Controls the order in which this component is updated" },
            { "ContextMenuSubmenu/Enabled", "Controls whether or not this component is enabled" },
            {
                "ContextMenuSubmenu/ItemsRoot",
                "All ContextMenuItemSources on slots under this one will be included in the submenu."
            },
            {
                "ContextMenuSubmenu/CounterClockwise",
                "Whether the items should be arranged clockwise or counter-clockwise in the submenu."
            },
            {
                "ContextMenuSubmenu/KeepPosition",
                "When set}, {the context menu will stay in the same place as the submenu opens. Otherwise}, {the context menu will recenter on the user's laser."
            },
            {
                "ContextMenuSubmenu/Hidden",
                "If set}, {the submenu is only visible to the user that opened it}, {(The button to open it)"
            },
            { "RootContextMenuItem/persistent", "Determines whether or not this item will be saved to the server." },
            { "RootContextMenuItem/UpdateOrder", "Controls the order in which this component is updated" },
            { "RootContextMenuItem/Enabled", "Controls whether or not this component is enabled" },
            {
                "RootContextMenuItem/OnlyForSide",
                "When set}, {the item will only be inserted when the context menu is opened on the specified hand."
            },
            {
                "RootContextMenuItem/ExcludeOnTools",
                "Determines whether or not the item shows up when opening the context menu while having a tool equipped on the same hand."
            },
            {
                "RootContextMenuItem/ExcludePrimaryHand",
                "Makes the item not show up when the context menu is open on the user's primary hand."
            },
            {
                "RootContextMenuItem/ExcludeSecondaryHand",
                "Makes the item not show up when the context menu is open on the user's secondary hand."
            },
            { "RootContextMenuItem/Item", "The ContextMenuItemSource that will be inserted into the context menu." },
            { "AlwaysOnFacetModule/persistent", "Determines whether or not this item will be saved to the server." },
            { "AlwaysOnFacetModule/UpdateOrder", "Controls the order in which this component is updated" },
            { "AlwaysOnFacetModule/Enabled", "Controls whether or not this component is enabled" },
            { "AlwaysOnFacetModule/_targets(list)", "The list of slots currently reparented into the active root." },
            { "ReferenceMultiDriver`1/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceMultiDriver`1/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceMultiDriver`1/Enabled", "Controls whether or not this component is enabled" },
            {
                "ReferenceMultiDriver`1/Reference",
                "Reference of the specified type}, {which will be driven to all fields listed in Drives"
            },
            { "ReferenceMultiDriver`1/Drives", "A list of fields to be driven by this component" },
            { "ValueMultiDriver`1/persistent", "Determines whether or not this item will be saved to the server." },
            { "ValueMultiDriver`1/UpdateOrder", "Controls the order in which this component is updated" },
            { "ValueMultiDriver`1/Enabled", "Controls whether or not this component is enabled" },
            {
                "ValueMultiDriver`1/Value",
                "Value of the specified type}, {which will be driven to all fields listed in Drives"
            },
            { "ValueMultiDriver`1/Drives", "A list of fields to be driven by this component" },
            { "MaterialSet/persistent", "Determines whether or not this item will be saved to the server." },
            { "MaterialSet/UpdateOrder", "Controls the order in which this component is updated" },
            { "MaterialSet/Enabled", "Controls whether or not this component is enabled" },
            {
                "MaterialSet/ActiveSetIndex",
                "The index into the Sets list of the materials to apply to the target renderer."
            },
            { "MaterialSet/Target", "The list of materials in a renderer to swap out." },
            { "MaterialSet/Sets", "The list of lists of materials in a renderer to swap out." },
            { "Camera/persistent", "Determines whether or not this item will be saved to the server." },
            { "Camera/UpdateOrder", "Controls the order in which this component is updated" },
            { "Camera/Enabled", "Controls whether or not this component is enabled" },
            { "Camera/DoubleBuffered", "Determines if DoubleBuffering is applied or not." },
            { "Camera/ForwardOnly", "Determine whether the render technique is only forward." },
            { "Camera/Projection", "Determines whether it's perspective or orthographic" },
            {
                "Camera/OrthographicSize",
                "The size of the render-output in orthographic view. (Only active when Projection is set to Orthographic"
            },
            {
                "Camera/FieldOfView",
                "The size of the render-output in perspective view. (Only active when Projection is set to Perspective"
            },
            { "Camera/NearClipping", "The point in units where the camera ignores near objects." },
            { "Camera/FarClipping", "The point in units where the camera ignores far objects." },
            { "Camera/UseTransformScale", "Determines if the scale of the camera should be taken into account." },
            { "Camera/ClearColor", "If CameraClearMode is set to Clear." },
            { "Camera/Viewport", "2D rectangular where the camera is allowed to render" },
            { "Camera/RenderTexture", "The RenderTextureProvider input in order to get a ITexture2D" },
            { "Camera/Postprocessing", "Determines if post processing is allowed." },
            { "Camera/ScreenSpaceReflections", "Determines if ScreenSpaceReflections are rendered." },
            { "Camera/MotionBlur", "Determines if MotionBlur is rendered or not." },
            { "Camera/RenderShadows", "Determines if shadows are rendered or not." },
            { "Camera/SelectiveRender", "A list of SyncReferences to slots the camera is allowed to render." },
            { "Camera/ExcludeRender", "A list of SyncReferences to slots the camera is NOT allowed to render." },
            { "MeshRenderer/persistent", "Determines whether or not this item will be saved to the server." },
            { "MeshRenderer/UpdateOrder", "Controls the order in which this component is updated" },
            { "MeshRenderer/Enabled", "Controls whether or not this component is enabled" },
            { "MeshRenderer/Mesh", "The mesh to be rendered. Can be a StaticMesh or a Procedural Mesh" },
            { "MeshRenderer/Materials", "A list of materials to be applied to the mesh" },
            {
                "MeshRenderer/ShadowCastMode",
                "How this object will cast shadows onto the world}, {or if it only draws a shadow."
            },
            { "SkinnedMeshRenderer/persistent", "Determines whether or not this item will be saved to the server." },
            { "SkinnedMeshRenderer/UpdateOrder", "Controls the order in which this component is updated" },
            { "SkinnedMeshRenderer/Enabled", "Controls whether or not this component is enabled" },
            { "SkinnedMeshRenderer/Mesh", "The mesh to be rendered. Can be a StaticMesh or a Procedural Mesh" },
            { "SkinnedMeshRenderer/Materials", "A list of materials to be applied to the mesh" },
            {
                "SkinnedMeshRenderer/ShadowCastMode",
                "How this object will cast shadows onto the world}, {or if it only draws a shadow."
            },
            {
                "SkinnedMeshRenderer/BoundsComputeMethod",
                "How the bounds of this mesh will be calculated. Should be left as Static if possible}, {for performance reasons."
            },
            { "SkinnedMeshRenderer/Bones", "Automatically Assigned — List of bones present in this mesh" },
            {
                "SkinnedMeshRenderer/BlendShapeWeights",
                "Automatically Assigned — List of blendshapes present in this mesh}, {and their respective weights."
            },
            { "RawDataTooltip/persistent", "Determines whether or not this item will be saved to the server." },
            { "RawDataTooltip/UpdateOrder", "Controls the order in which this component is updated" },
            { "RawDataTooltip/Enabled", "Controls whether or not this component is enabled" },
            { "AutoLookAtUser/persistent", "Determines whether or not this item will be saved to the server." },
            { "AutoLookAtUser/UpdateOrder", "Controls the order in which this component is updated" },
            { "AutoLookAtUser/Enabled", "Controls whether or not this component is enabled" },
            {
                "AutoLookAtUser/RetargetDistance",
                "The distance that the current target needs to be from the slot for it to pick a new target."
            },
            { "AutoLookAtUser/LerpSpeed", "The speed at which the slot rotates towards its target." },
            { "AutoLookAtUser/TargetedUser", "The user that the slot is currently looking at." },
            { "AutoLookAtUser/AutoTarget", "Whether or not the component should pick its own target." },
            {
                "AutoLookAtUser/ExcludeActiveUser",
                "If this is true and the slot with this component is parented to a user}, {it won't look at that user."
            },
            { "AxisAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AxisAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisAligner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AxisAligner/AutoAddChildren",
                "Controls whether slots below this component's slot in the hierarchy are automatically added to _targets"
            },
            { "AxisAligner/Direction", "The axis and direction the items will be aligned on" },
            {
                "AxisAligner/GlobalAxisXAlign",
                "Controls how items will be aligned globally}, {with each other in the X Axis"
            },
            {
                "AxisAligner/GlobalAxisYAlign",
                "Controls how items will be aligned globally}, {with each other in the Y Axis"
            },
            {
                "AxisAligner/GlobalAxisZAlign",
                "Controls how items will be aligned globally}, {with each other in the Z Axis"
            },
            {
                "AxisAligner/ElementAxisXAlign",
                "Controls how each item aligns itself}, {within the align}, {in the X Axis"
            },
            {
                "AxisAligner/ElementAxisYAlign",
                "Controls how each item aligns itself}, {within the align}, {in the Y Axis"
            },
            {
                "AxisAligner/ElementAxisZAlign",
                "Controls how each item aligns itself}, {within the align}, {in the Z Axis"
            },
            { "AxisAligner/Separation", "The spacing between each item in _targets along the specified axis" },
            { "AxisAligner/ExcludeList", "A list of slots which are excluded from the aligner" },
            {
                "AxisAligner/_targets",
                "A list of slots which will be aligned. This will be automatically generated if AutoAddChildren is enabled."
            },
            { "AxisPanner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AxisPanner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisPanner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AxisPanner/TimeBase",
                "Reference to the timebase or \"clock\" that the component will use for moving an object. Possible components that can be used as an input is AuthorityTimeBase located at \"Utility/AuthorityTimeBase\"."
            },
            { "AxisPanner/Speed", "The speed at which the object will move." },
            { "AxisPanner/Range", "How far the object will move." },
            { "AxisPanner/Offset", "Where the object starts its move." },
            { "AxisPanner/Axis", "The direction that the object will move in." },
            {
                "AxisPanner/ReferenceScale",
                "Sets the maximum scale that the object will become at the halfway point. Starting at 0 the object will grow to this size and then back to 0."
            },
            {
                "AxisPanner/FullScaleRangeRatio",
                "Changes the duration that the object scale will remain at the ReferenceScale size."
            },
            {
                "AxisPanner/_position",
                "Reference to the position that is being driven. By default}, {set the to object that this component is first attached to."
            },
            { "AxisPanner/_scale", "Reference to the scale that is being driven. By default}, {set to null." },
            { "AxisRotationAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AxisRotationAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisRotationAligner/Enabled", "Controls whether or not this component is enabled" },
            { "BooleanReferenceDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "BooleanReferenceDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "BooleanReferenceDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "BooleanReferenceDriver/State",
                "Determines whether TargetReference should be driven to TrueTarget or to FalseTarget."
            },
            { "BooleanReferenceDriver/TargetReference", "The field that should be driven." },
            { "BooleanReferenceDriver/FalseTarget", "The value that the field will be driven to if State is false." },
            { "BooleanReferenceDriver/TrueTarget", "The value that the field will be driven to if State is true." },
            { "BooleanSwitcher/persistent", "Determines whether or not this item will be saved to the server." },
            { "BooleanSwitcher/UpdateOrder", "Controls the order in which this component is updated" },
            { "BooleanSwitcher/Enabled", "Controls whether or not this component is enabled" },
            {
                "BooleanSwitcher/AutoAddChildren",
                "If true}, {the Targets list will be automatically populated with the child slots of the slot that this component is on."
            },
            { "BooleanSwitcher/Targets", "The list of slots of which one will be enabled." },
            { "BooleanSwitcher/ActiveIndex", "The index of the currently active slot." },
            { "BooleanValueDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "BooleanValueDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "BooleanValueDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "BooleanValueDriver/State",
                "The state of this component. Chooses which Value to use when driving TargetField"
            },
            { "BooleanValueDriver/TargetField", "The Field to drive" },
            { "BooleanValueDriver/FalseValue", "The value that is used to drive TargetField when State is false." },
            { "BooleanValueDriver/TrueValue", "The value that is used to drive TargetField when State is true." },
            { "BoundingBoxDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoundingBoxDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoundingBoxDriver/Enabled", "Controls whether or not this component is enabled" },
            { "CircleAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "CircleAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "CircleAligner/Enabled", "Controls whether or not this component is enabled" },
            {
                "CircleAligner/AutoAddChildren",
                "Controls whether slots below this component's slot in the hierarchy are automatically added to _targets"
            },
            { "CircleAligner/Axis", "The axis around which the slots will be aligned." },
            { "CircleAligner/Radius", "The radius of the circle that the slots will be positioned on." },
            { "CircleAligner/Offset", "Offsets the starting position of the circle." },
            {
                "CircleAligner/Arc",
                "360 by default. If smaller}, {the slots will only fill that section of a circle. Likewise}, {if it is larger than 360}, {the slots will wrap around the circle multiple times."
            },
            {
                "CircleAligner/FillWholeArc",
                "If true}, {the last slot will be at the very end of the arch}, {otherwise there will be a gap after the last slots."
            },
            {
                "CircleAligner/RotationOffset",
                "An offset}, {in degrees}, {that is applied to the rotation of the target slots."
            },
            { "CircleAligner/Items", "The list of slots to be aligned." },
            { "CopyGlobalScale/persistent", "Determines whether or not this item will be saved to the server." },
            { "CopyGlobalScale/UpdateOrder", "Controls the order in which this component is updated" },
            { "CopyGlobalScale/Enabled", "Controls whether or not this component is enabled" },
            { "CopyGlobalScale/Source", "The object that serves as scale reference." },
            {
                "CopyGlobalScale/NonUniform",
                "If true}, {non-uniform scale is preserved}, {otherwise the X scale of the source serves as X}, {Y and Z of the target."
            },
            {
                "CopyGlobalScale/_scaleDrive",
                "The field that is driven to match the global scale of the source. This automatically gets populated with the scale field of the slot that this component is added to."
            },
            { "CopyGlobalTransform/persistent", "Determines whether or not this item will be saved to the server." },
            { "CopyGlobalTransform/UpdateOrder", "Controls the order in which this component is updated" },
            { "CopyGlobalTransform/Enabled", "Controls whether or not this component is enabled" },
            { "CopyGlobalTransform/Source", "The object that serves as the transform reference." },
            {
                "CopyGlobalTransform/_posDrive",
                "The field that is driven to match the global position of the source. This automatically gets populated with the scale field of the slot that this component is added to."
            },
            {
                "CopyGlobalTransform/_rotDrive",
                "The field that is driven to match the global rotation of the source. This automatically gets populated with the scale field of the slot that this component is added to."
            },
            {
                "DynamicBlendShapeDriver/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "DynamicBlendShapeDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "DynamicBlendShapeDriver/Enabled", "Controls whether or not this component is enabled" },
            { "FlipAtUser/persistent", "Determines whether or not this item will be saved to the server." },
            { "FlipAtUser/UpdateOrder", "Controls the order in which this component is updated" },
            { "FlipAtUser/Enabled", "Controls whether or not this component is enabled" },
            {
                "FlipAtUser/_rotation",
                "The field that is driven to make the object rotate to the user. This is automatically set to the Rotation field of the slot this component is added to."
            },
            { "Float2Driver/persistent", "Determines whether or not this item will be saved to the server." },
            { "Float2Driver/UpdateOrder", "Controls the order in which this component is updated" },
            { "Float2Driver/Enabled", "Controls whether or not this component is enabled" },
            {
                "Float2Driver/X",
                "The field that holds the X value for the float2. If null}, {the X component of the float2 will be 0."
            },
            {
                "Float2Driver/Y",
                "The field that holds the Y value for the float2. If null}, {the Y component of the float2 will be 0."
            },
            { "Float2Driver/Target", "The field that is driven to the constructed float2." },
            { "Float3Driver/persistent", "Determines whether or not this item will be saved to the server." },
            { "Float3Driver/UpdateOrder", "Controls the order in which this component is updated" },
            { "Float3Driver/Enabled", "Controls whether or not this component is enabled" },
            {
                "Float3Driver/X",
                "The field that holds the X value for the float3. If null}, {the X component of the float3 will be 0."
            },
            {
                "Float3Driver/Y",
                "The field that holds the Y value for the float3. If null}, {the Y component of the float3 will be 0."
            },
            {
                "Float3Driver/Z",
                "The field that holds the Z value for the float3. If null}, {the Z component of the float3 will be 0."
            },
            { "Float3Driver/Target", "The field that is driven to the constructed float3." },
            { "Float4Driver/persistent", "Determines whether or not this item will be saved to the server." },
            { "Float4Driver/UpdateOrder", "Controls the order in which this component is updated" },
            { "Float4Driver/Enabled", "Controls whether or not this component is enabled" },
            {
                "Float4Driver/X",
                "The field that holds the X value for the float4. If null}, {the X component of the float4 will be 0."
            },
            {
                "Float4Driver/Y",
                "The field that holds the Y value for the float4. If null}, {the Y component of the float4 will be 0."
            },
            {
                "Float4Driver/Z",
                "The field that holds the Z value for the float4. If null}, {the Z component of the float4 will be 0."
            },
            {
                "Float4Driver/W",
                "The field that holds the W value for the float4. If null}, {the W component of the float4 will be 0."
            },
            { "Float4Driver/Target", "The field that is driven to the constructed float4." },
            { "LinearAngleMapper/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearAngleMapper/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearAngleMapper/Enabled", "Controls whether or not this component is enabled" },
            { "LinearColorMapper/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearColorMapper/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearColorMapper/Enabled", "Controls whether or not this component is enabled" },
            { "LinearMapper1D/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearMapper1D/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearMapper1D/Enabled", "Controls whether or not this component is enabled" },
            { "LinearMapper2D/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearMapper2D/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearMapper2D/Enabled", "Controls whether or not this component is enabled" },
            { "LinearMapper3D/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearMapper3D/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearMapper3D/Enabled", "Controls whether or not this component is enabled" },
            { "LinearMapper4D/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearMapper4D/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearMapper4D/Enabled", "Controls whether or not this component is enabled" },
            { "LinearRotationMapper/persistent", "Determines whether or not this item will be saved to the server." },
            { "LinearRotationMapper/UpdateOrder", "Controls the order in which this component is updated" },
            { "LinearRotationMapper/Enabled", "Controls whether or not this component is enabled" },
            { "LineTransform/persistent", "Determines whether or not this item will be saved to the server." },
            { "LineTransform/UpdateOrder", "Controls the order in which this component is updated" },
            { "LineTransform/Enabled", "Controls whether or not this component is enabled" },
            { "LookAt/persistent", "Determines whether or not this item will be saved to the server." },
            { "LookAt/UpdateOrder", "Controls the order in which this component is updated" },
            { "LookAt/Enabled", "Controls whether or not this component is enabled" },
            { "LookAtUser/persistent", "Determines whether or not this item will be saved to the server." },
            { "LookAtUser/UpdateOrder", "Controls the order in which this component is updated" },
            { "LookAtUser/Enabled", "Controls whether or not this component is enabled" },
            { "LookAtUser/TargetUser", "The user to look at}, {unless TargetAtLocalUser is checked." },
            { "LookAtUser/TargetAtLocalUser", "Targets the Local User in each client." },
            { "LookAtUser/SourcePositionOffset", "Offset from which to calculate the look vector." },
            { "LookAtUser/Invert", "The rotated item faces away from the user}, {instead of towards." },
            { "LookAtUser/RotationOffset", "The degree to which the item is rotated away from the look vector." },
            { "LookAtUser/PositionSource", "The UserNode to calculate the look vector from" },
            { "LookAtUser/AroundAxis", "The rotation is around an arbitrary axis defined in Axis." },
            { "LookAtUser/Axis", "A unit vector specifying the arbitrary axis to rotate around" },
            { "LookAtUser/_rotationDrive", "Automatically Assigned - The FloatQ to be driven by this component." },
            { "MirrorTransform/persistent", "Determines whether or not this item will be saved to the server." },
            { "MirrorTransform/UpdateOrder", "Controls the order in which this component is updated" },
            { "MirrorTransform/Enabled", "Controls whether or not this component is enabled" },
            {
                "MultiBoolConditionDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MultiBoolConditionDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiBoolConditionDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "MultiBoolConditionDriver/Target",
                "The field to drive to true if the bools in Conditions meet the conditions set by ConditionMode"
            },
            {
                "MultiBoolConditionDriver/Mode",
                "What state the bools in Conditions must be in}, {to drive Target to true."
            },
            { "MultiBoolConditionDriver/Conditions", "A list of bool fields to compare against the ConditionMode" },
            { "ObjectGridAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "ObjectGridAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "ObjectGridAligner/Enabled", "Controls whether or not this component is enabled" },
            {
                "ObjectGridAligner/AutoAddChildren",
                "Controls whether slots below this component's slot in the hierarchy are automatically added to _targets"
            },
            { "ObjectScroller/persistent", "Determines whether or not this item will be saved to the server." },
            { "ObjectScroller/UpdateOrder", "Controls the order in which this component is updated" },
            { "ObjectScroller/Enabled", "Controls whether or not this component is enabled" },
            { "Panner1D/persistent", "Determines whether or not this item will be saved to the server." },
            { "Panner1D/UpdateOrder", "Controls the order in which this component is updated" },
            { "Panner1D/Enabled", "Controls whether or not this component is enabled" },
            { "Panner2D/persistent", "Determines whether or not this item will be saved to the server." },
            { "Panner2D/UpdateOrder", "Controls the order in which this component is updated" },
            { "Panner2D/Enabled", "Controls whether or not this component is enabled" },
            { "Panner3D/persistent", "Determines whether or not this item will be saved to the server." },
            { "Panner3D/UpdateOrder", "Controls the order in which this component is updated" },
            { "Panner3D/Enabled", "Controls whether or not this component is enabled" },
            { "Panner4D/persistent", "Determines whether or not this item will be saved to the server." },
            { "Panner4D/UpdateOrder", "Controls the order in which this component is updated" },
            { "Panner4D/Enabled", "Controls whether or not this component is enabled" },
            { "PositionAtUser/persistent", "Determines whether or not this item will be saved to the server." },
            { "PositionAtUser/UpdateOrder", "Controls the order in which this component is updated" },
            { "PositionAtUser/Enabled", "Controls whether or not this component is enabled" },
            {
                "PositionAtUser/TargetUser",
                "The user that will be used to calculate the parent slot position}, {unless PositionAtLocalUser is selected."
            },
            {
                "PositionAtUser/PositionAtLocalUser",
                "Position the parent slot at the Local User of each client}, {ignoring the value in TargetUser"
            },
            {
                "PositionAtUser/TargetPositionOffset",
                "Position offset in the user's local space units. Respects the user's current scale and transforms."
            },
            {
                "PositionAtUser/TargetRotationOffset",
                "Rotation offset in the user's local space unit. Respects the user's current scale and transforms."
            },
            { "PositionAtUser/PositionOffset", "Position offset in global space units" },
            { "PositionAtUser/RotationOffset", "Rotation offset in global space units" },
            { "PositionAtUser/PositionSource", "The user node that the position will be calculated from" },
            { "PositionAtUser/RotationSource", "The user node that the rotation will be calculated from" },
            { "PositionAtUser/PositionDrive", "Target Float3 to drive with the calculated position value" },
            { "PositionAtUser/RotationDrive", "Target FloatQ to drive with the calculated rotation value." },
            { "PositionDeltaDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "PositionDeltaDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "PositionDeltaDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RaycastDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "RaycastDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "RaycastDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RayDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "RayDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "RayDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RelativePositioner/persistent", "Determines whether or not this item will be saved to the server." },
            { "RelativePositioner/UpdateOrder", "Controls the order in which this component is updated" },
            { "RelativePositioner/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceCast/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceCast/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceCast/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceCopy/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceCopy/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceCopy/Enabled", "Controls whether or not this component is enabled" },
            {
                "ReferenceEqualityDriver/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "ReferenceEqualityDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceEqualityDriver/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceUserOverride/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceUserOverride/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceUserOverride/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleAligner/Enabled", "Controls whether or not this component is enabled" },
            {
                "ScaleAligner/AutoAddChildren",
                "Controls whether slots below this component's slot in the hierarchy are automatically added to _targets"
            },
            { "Scaler/persistent", "Determines whether or not this item will be saved to the server." },
            { "Scaler/UpdateOrder", "Controls the order in which this component is updated" },
            { "Scaler/Enabled", "Controls whether or not this component is enabled" },
            { "SmoothTransform/persistent", "Determines whether or not this item will be saved to the server." },
            { "SmoothTransform/UpdateOrder", "Controls the order in which this component is updated" },
            { "SmoothTransform/Enabled", "Controls whether or not this component is enabled" },
            { "SmoothValue/persistent", "Determines whether or not this item will be saved to the server." },
            { "SmoothValue/UpdateOrder", "Controls the order in which this component is updated" },
            { "SmoothValue/Enabled", "Controls whether or not this component is enabled" },
            { "SmoothValue/TargetValue", "The value that is being interpolated towards" },
            { "SmoothValue/Speed", "The speed at which it is interpolated" },
            {
                "SmoothValue/WriteBack",
                "If WriteBack is enabled}, {writing to the driven value will also set TargetValue. If not}, {the driven value cannot be written to."
            },
            { "SmoothValue/Value", "The value that is being driven" },
            { "SphereAligner/persistent", "Determines whether or not this item will be saved to the server." },
            { "SphereAligner/UpdateOrder", "Controls the order in which this component is updated" },
            { "SphereAligner/Enabled", "Controls whether or not this component is enabled" },
            {
                "SphereAligner/AutoAddChildren",
                "Controls whether slots below this component's slot in the hierarchy are automatically added to _targets"
            },
            { "Spinner/persistent", "Determines whether or not this item will be saved to the server." },
            { "Spinner/UpdateOrder", "Controls the order in which this component is updated" },
            { "Spinner/Enabled", "Controls whether or not this component is enabled" },
            { "TextureSizeDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextureSizeDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextureSizeDriver/Enabled", "Controls whether or not this component is enabled" },
            { "AssetFrameSlot/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetFrameSlot/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetFrameSlot/Enabled", "Controls whether or not this component is enabled" },
            { "Grabbable/persistent", "Determines whether or not this item will be saved to the server." },
            { "Grabbable/UpdateOrder", "Controls the order in which this component is updated" },
            { "Grabbable/Enabled", "Controls whether or not this component is enabled" },
            {
                "Grabbable/ReparentOnRelease",
                "The slot is reparented to the value of _lastParent}, {instead of root when dropped *"
            },
            { "Grabbable/PreserveUserSpace", "The slot is reparented to Local User Space *" },
            { "Grabbable/DestroyOnRelease", "The slot this component is attached to is destroyed upon release" },
            {
                "Grabbable/GrabPriority",
                "When attempting to grab multiple objects at once}, {only those with the highest grab priority are grabbed."
            },
            { "Grabbable/CustomCanGrabCheck", "Not Usable inside Neos" },
            { "Grabbable/EditModeOnly", "Determines if this grabbable is effective only in Edit Mode" },
            { "Grabbable/AllowSteal", "Other users can grab the slot this component is attached to." },
            { "Grabbable/DropOnDisable", "The parent slot will be dropped when this component is disabled." },
            { "Grabbable/OnlyUsers", "A list of users that are allowed to grab this slot." },
            { "Grabbable/Scalable", "The parent slot can be scaled" },
            { "Grabbable/Receivable", "The parent slot can be dropped onto a GrabbableReceiverSurface" },
            {
                "Grabbable/AllowOnlyPhysicalGrab",
                "Only allow grab an object with a physical interaction - remote grabs are not allowed"
            },
            { "Grabbable/_grabber", "Automatically Assigned" }, { "Grabbable/_lastParent", "Automatically Assigned" },
            { "Grabbable/_lastParentIsUserSpace", "Automatically Assigned" },
            { "Grabbable/__legacyActiveUserRootOnly", "Automatically Assigned" },
            {
                "GrabbableAvatarPoseFilter/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "GrabbableAvatarPoseFilter/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabbableAvatarPoseFilter/Enabled", "Controls whether or not this component is enabled" },
            { "GrabbableParenter/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrabbableParenter/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabbableParenter/Enabled", "Controls whether or not this component is enabled" },
            {
                "GrabbableReceiverSurface/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "GrabbableReceiverSurface/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabbableReceiverSurface/Enabled", "Controls whether or not this component is enabled" },
            {
                "GrabbableReceiverSurface/ParentPlaced",
                "Whether the Grabbable object gets reparented to this object's Slot or the Slot specified in OverrideParent."
            },
            {
                "GrabbableReceiverSurface/OverrideParent",
                "If not null}, {the slot that the Grabbable object gets reparented to}, {if ParentPlaced is true."
            },
            {
                "GrabbableReceiverSurface/TweenTime",
                "The amount of time in seconds for the animation effect when the object snaps to the surface."
            },
            {
                "GrabbableReceiverSurface/Offset",
                "The distance from the surface that the Grabbable object will stop at."
            },
            { "GrabbableReceiverSurface/Directions", "List of directions a Grabbable object can be received from." },
            { "GrabbableReceiverSurface/Mode", "Blacklist or Whitelist" },
            { "GrabbableReceiverSurface/Tags", "List of tags that the filter applies to." },
            { "GrabInstancer/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrabInstancer/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabInstancer/Enabled", "Controls whether or not this component is enabled" },
            { "GrabTooltipSnapper/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrabTooltipSnapper/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabTooltipSnapper/Enabled", "Controls whether or not this component is enabled" },
            { "Joint/persistent", "Determines whether or not this item will be saved to the server." },
            { "Joint/UpdateOrder", "Controls the order in which this component is updated" },
            { "Joint/Enabled", "Controls whether or not this component is enabled" },
            { "Joint/EditModeOnly", "User can only interact with the joint in Edit Mode" },
            { "Joint/AllowSteal", "Controls whether other users can steal the grabbable joint from other players" },
            { "Joint/DropOnDisable", "Controls whether the user drops the joint if the object has been disabled" },
            {
                "Joint/AllowOnlyPhysicalGrab",
                "Only allow grabbing the joint with a physical interaction - remote grabs are not allowed"
            },
            { "Joint/MaxTwist", "Maximum amount the joint will rotate in the given axis" },
            { "Joint/Axis", "Determines which axis the joint rotates on. Use 1 to define the axis}, {0 to ignore it" },
            {
                "Joint/SnapTime",
                "The time it takes for the joint to lerp towards given SnapOrientations. Higher the value the slower it takes"
            },
            { "Joint/SnapOnRelease", "Controls whether the join snaps to given SnapOrientations" },
            { "KnobControl/persistent", "Determines whether or not this item will be saved to the server." },
            { "KnobControl/UpdateOrder", "Controls the order in which this component is updated" },
            { "KnobControl/Enabled", "Controls whether or not this component is enabled" },
            { "KnobControl/Target", "A field to set with the knob's value." },
            { "KnobControl/Callback", "A delegate that is called with the knob's value change." },
            { "KnobControl/RotationAxis", "The axis around which to measure the slot's local rotation." },
            { "KnobControl/Rate", "The proportional effect of the knob}, {in values per full (360-degree) rotation." },
            { "KnobControl/Min", "The minimum value for the knob." },
            { "KnobControl/Max", "The maximum value for the knob." },
            { "KnobControl/_lastRotation", "(internal}, {read-only) Used in determining the rotational change." },
            { "KnobControl/_lastAxis", "(internal}, {read-only) Used if the RotationAxis changes." },
            { "KnobControl/_lastUser", "(internal}, {read-only) The user who last rotated the slot." },
            { "PhysicalButton/persistent", "Determines whether or not this item will be saved to the server." },
            { "PhysicalButton/UpdateOrder", "Controls the order in which this component is updated" },
            { "PhysicalButton/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleElement/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleElement/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleElement/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleGroup/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleGroup/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleGroup/Enabled", "Controls whether or not this component is enabled" },
            { "SearchBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "SearchBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "SearchBlock/Enabled", "Controls whether or not this component is enabled" },
            { "Slider/persistent", "Determines whether or not this item will be saved to the server." },
            { "Slider/UpdateOrder", "Controls the order in which this component is updated" },
            { "Slider/Enabled", "Controls whether or not this component is enabled" },
            { "Snapper/persistent", "Determines whether or not this item will be saved to the server." },
            { "Snapper/UpdateOrder", "Controls the order in which this component is updated" },
            { "Snapper/Enabled", "Controls whether or not this component is enabled" },
            {
                "Snapper/CheckStaticColliders",
                "Allows the Snapper to look for colliders that are set to Static rather then Trigger."
            },
            { "Snapper/SnapTargetWhitelist", "List of SnapTargets that the slot can attach to" },
            {
                "Snapper/Keywords",
                "List of keywords to match against a corresponding SnapTargets. Can have multiple keywords to snap to multiple SnapTargets"
            },
            { "SnapTarget/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapTarget/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapTarget/Enabled", "Controls whether or not this component is enabled" },
            { "SnapTarget/SnapperWhitelist", "List of Snappers that are allowed to attach to this component" },
            { "SnapTarget/SnapperKeywordWhitelist", "List of keywords to match against a corresponding Snapper" },
            { "SnapTarget/DirectSnapOnly", "Unused" },
            {
                "SnapTarget/MaximumSnapDistance",
                "The maximum distance the Snapper can snap with the Target. This value drives the SphereCollider radius"
            },
            { "SnapTarget/AnimationTime", "The time it takes for the Snapper to lerp to the Target" },
            { "SnapTarget/_snapColliderRadius", "The radius drive reference of the SphereCollider" },
            {
                "SnapTarget/proxySphere",
                "Reference of the SphereCollider that is added on adding the SnapTarget to a slot"
            },
            {
                "TooltipAvatarPoseFilter/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "TooltipAvatarPoseFilter/UpdateOrder", "Controls the order in which this component is updated" },
            { "TooltipAvatarPoseFilter/Enabled", "Controls whether or not this component is enabled" },
            { "TouchableData/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchableData/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchableData/Enabled", "Controls whether or not this component is enabled" },
            { "TouchButton/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchButton/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchButton/Enabled", "Controls whether or not this component is enabled" },
            { "TouchEventRelay/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchEventRelay/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchEventRelay/Enabled", "Controls whether or not this component is enabled" },
            { "TouchToggle/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchToggle/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchToggle/Enabled", "Controls whether or not this component is enabled" },
            { "BoxPointGenerator/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxPointGenerator/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxPointGenerator/Enabled", "Controls whether or not this component is enabled" },
            { "CirclePointGenerator/persistent", "Determines whether or not this item will be saved to the server." },
            { "CirclePointGenerator/UpdateOrder", "Controls the order in which this component is updated" },
            { "CirclePointGenerator/Enabled", "Controls whether or not this component is enabled" },
            { "PointGenerator/persistent", "Determines whether or not this item will be saved to the server." },
            { "PointGenerator/UpdateOrder", "Controls the order in which this component is updated" },
            { "PointGenerator/Enabled", "Controls whether or not this component is enabled" },
            { "SpherePointGenerator/persistent", "Determines whether or not this item will be saved to the server." },
            { "SpherePointGenerator/UpdateOrder", "Controls the order in which this component is updated" },
            { "SpherePointGenerator/Enabled", "Controls whether or not this component is enabled" },
            { "SquarePointGenerator/persistent", "Determines whether or not this item will be saved to the server." },
            { "SquarePointGenerator/UpdateOrder", "Controls the order in which this component is updated" },
            { "SquarePointGenerator/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleObject/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleObject/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleObject/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleObjectCreator/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleObjectCreator/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleObjectCreator/Enabled", "Controls whether or not this component is enabled" },
            { "ScaleObjectManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScaleObjectManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScaleObjectManager/Enabled", "Controls whether or not this component is enabled" },
            {
                "ScaleObjectManager/HeightScaleRatio",
                "Allows adjusting the way an object's vertical position is adjusted in the distance."
            },
            { "SnapCircle/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapCircle/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapCircle/Enabled", "Controls whether or not this component is enabled" },
            { "SnapGrid/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapGrid/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapGrid/Enabled", "Controls whether or not this component is enabled" },
            { "SnapLine/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapLine/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapLine/Enabled", "Controls whether or not this component is enabled" },
            { "SnapPlane/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapPlane/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapPlane/Enabled", "Controls whether or not this component is enabled" },
            { "SnapPoint/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapPoint/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapPoint/Enabled", "Controls whether or not this component is enabled" },
            { "SnapSphere/persistent", "Determines whether or not this item will be saved to the server." },
            { "SnapSphere/UpdateOrder", "Controls the order in which this component is updated" },
            { "SnapSphere/Enabled", "Controls whether or not this component is enabled" },
            { "AssetOptimizationBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetOptimizationBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetOptimizationBlock/Enabled", "Controls whether or not this component is enabled" },
            { "DestroyBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "DestroyBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "DestroyBlock/Enabled", "Controls whether or not this component is enabled" },
            { "DestroyRoot/persistent", "Determines whether or not this item will be saved to the server." },
            { "DestroyRoot/UpdateOrder", "Controls the order in which this component is updated" },
            { "DestroyRoot/Enabled", "Controls whether or not this component is enabled" },
            { "DuplicateBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "DuplicateBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "DuplicateBlock/Enabled", "Controls whether or not this component is enabled" },
            { "GrabbableReparentBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrabbableReparentBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabbableReparentBlock/Enabled", "Controls whether or not this component is enabled" },
            {
                "GrabbableReparentBlock/DontReparent",
                "Don't allow this slot to be reparented. Subject to the rules explained in Grabbable - Behavior"
            },
            {
                "GrabbableReparentBlock/MaxDepth",
                "Objects beyond this level in the hierarchy will not be effected. Set to Int MaxValue by default"
            },
            { "GrabBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "GrabBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "GrabBlock/Enabled", "Controls whether or not this component is enabled" },
            { "NoDestroyUndo/persistent", "Determines whether or not this item will be saved to the server." },
            { "NoDestroyUndo/UpdateOrder", "Controls the order in which this component is updated" },
            { "NoDestroyUndo/Enabled", "Controls whether or not this component is enabled" },
            { "TeleportPassthrough/persistent", "Determines whether or not this item will be saved to the server." },
            { "TeleportPassthrough/UpdateOrder", "Controls the order in which this component is updated" },
            { "TeleportPassthrough/Enabled", "Controls whether or not this component is enabled" },
            { "TeleportSurface/persistent", "Determines whether or not this item will be saved to the server." },
            { "TeleportSurface/UpdateOrder", "Controls the order in which this component is updated" },
            { "TeleportSurface/Enabled", "Controls whether or not this component is enabled" },
            { "DestroyProxy/persistent", "Determines whether or not this item will be saved to the server." },
            { "DestroyProxy/UpdateOrder", "Controls the order in which this component is updated" },
            { "DestroyProxy/Enabled", "Controls whether or not this component is enabled" },
            { "DestroyOnUserLeave/persistent", "Determines whether or not this item will be saved to the server." },
            { "DestroyOnUserLeave/UpdateOrder", "Controls the order in which this component is updated" },
            { "DestroyOnUserLeave/Enabled", "Controls whether or not this component is enabled" },
            { "DestroyOnUserLeave/User", "The user that will cause the parent slot to be deleted upon leaving" },
            { "DestroyOnUserLeave/_machineId", "Automatically Assigned" },
            { "DestroyOnUserLeave/_userId", "Automatically Assigned" },
            { "ObjectRoot/persistent", "Determines whether or not this item will be saved to the server." },
            { "ObjectRoot/UpdateOrder", "Controls the order in which this component is updated" },
            { "ObjectRoot/Enabled", "Controls whether or not this component is enabled" },
            { "RandomObjectSpawner/persistent", "Determines whether or not this item will be saved to the server." },
            { "RandomObjectSpawner/UpdateOrder", "Controls the order in which this component is updated" },
            { "RandomObjectSpawner/Enabled", "Controls whether or not this component is enabled" },
            { "RandomObjectSpawner/Templates", "List of slots to be selected from}, {when a Trigger is invoked" },
            {
                "RandomObjectSpawner/LocalSpace",
                "Slot where the selected template item will be spawned}, {unless UseParentSpace is true}, {or OverrideRootSpace is not null."
            },
            {
                "RandomObjectSpawner/UseParentSpace",
                "Template item will be spawned in the parent of the LocalSpace slot}, {unless OverrideRootSpace is set."
            },
            {
                "RandomObjectSpawner/OverrideRootSpace",
                "Reference to a SpawnSpace element on another component}, {which overrides LocalSpace and UseParentSpace on this component."
            },
            { "DualColorImage/persistent", "Determines whether or not this item will be saved to the server." },
            { "DualColorImage/UpdateOrder", "Controls the order in which this component is updated" },
            { "DualColorImage/Enabled", "Controls whether or not this component is enabled" },
            { "Image/persistent", "Determines whether or not this item will be saved to the server." },
            { "Image/UpdateOrder", "Controls the order in which this component is updated" },
            { "Image/Enabled", "Controls whether or not this component is enabled" },
            { "Image/Sprite", "The sprite to render" }, { "Image/Material", "The material to render with" },
            { "Image/Tint", "A color that is multiplied with the material's color" },
            { "Image/PreserveAspect", "FIXME" }, { "Image/NineSliceSizing", "FIXME" },
            { "Image/InteractionTarget", "FIXME" }, { "Image/__legacyZWrite", "Internal" },
            { "Mask/persistent", "Determines whether or not this item will be saved to the server." },
            { "Mask/UpdateOrder", "Controls the order in which this component is updated" },
            { "Mask/Enabled", "Controls whether or not this component is enabled" },
            { "Mask/ShowMaskGraphic", "Shows the graphic being used to do the masking" },
            { "OutlinedArc/persistent", "Determines whether or not this item will be saved to the server." },
            { "OutlinedArc/UpdateOrder", "Controls the order in which this component is updated" },
            { "OutlinedArc/Enabled", "Controls whether or not this component is enabled" },
            { "RawGraphic/persistent", "Determines whether or not this item will be saved to the server." },
            { "RawGraphic/UpdateOrder", "Controls the order in which this component is updated" },
            { "RawGraphic/Enabled", "Controls whether or not this component is enabled" },
            { "RawImage/persistent", "Determines whether or not this item will be saved to the server." },
            { "RawImage/UpdateOrder", "Controls the order in which this component is updated" },
            { "RawImage/Enabled", "Controls whether or not this component is enabled" },
            { "Text/persistent", "Determines whether or not this item will be saved to the server." },
            { "Text/UpdateOrder", "Controls the order in which this component is updated" },
            { "Text/Enabled", "Controls whether or not this component is enabled" }, { "Text/Font", "The font to use" },
            { "Text/Content", "What to display" },
            { "Text/ParseRichText", "Whether or not to interpret text formatting" },
            { "Text/NullContent", "What to display if Content is empty" },
            { "Text/Size", "The size to render text at}, {in display units" },
            { "Text/HorizontalAlign", "How to align the text}, {horizontally" },
            { "Text/VerticalAlign", "How to align the text}, {vertically" },
            { "Text/AlignmentMode", "How to compute alignment" }, { "Text/Color", "The color to render the text with" },
            { "Text/Materials", "The Material(s) to render with" },
            { "Text/LineHeight", "How high each line of text is" }, { "Text/MaskPattern", "TBD" },
            { "Text/HorizontalAutoSize", "Automatically adjusts the text's size to fit in its horizontal space" },
            { "Text/VerticalAutoSize", "Automatically adjusts the text's size to fit in its vertical space" },
            { "Text/AutoSizeMin", "The minimum size that can be reached via auto-sizing" },
            { "Text/AutoSizeMax", "The maximum size that can be reached via auto-sizing" },
            { "Text/CaretPosition", "TBD" }, { "Text/SelectionStart", "TBD" }, { "Text/CaretColor", "TBD" },
            { "Text/SelectionColor", "TBD" }, { "Text/InteractionTarget", "TBD" },
            { "Text/_legacyFontMaterial", "Internal" }, { "Text/_legacyAlign", "Internal" },
            { "TiledRawImage/persistent", "Determines whether or not this item will be saved to the server." },
            { "TiledRawImage/UpdateOrder", "Controls the order in which this component is updated" },
            { "TiledRawImage/Enabled", "Controls whether or not this component is enabled" },
            { "Button/persistent", "Determines whether or not this item will be saved to the server." },
            { "Button/UpdateOrder", "Controls the order in which this component is updated" },
            { "Button/Enabled", "Controls whether or not this component is enabled" },
            { "Button/BaseColor", "The color that all other tints will be based on" },
            {
                "Button/ColorDrivers",
                "A list of sets of colors. Each one points at another component's color}, {and determines how it looks normally}, {when highlighted}, {when pressed}, {and when disabled"
            },
            { "Button/__legacy_NormalColor", "Internal" }, { "Button/__legacy_HighlightColor", "Internal" },
            { "Button/__legacy_PressColor", "Internal" }, { "Button/__legacy_DisabledColor", "Internal" },
            { "Button/__legacy_TintColorMode", "Internal" }, { "Button/__legacy_ColorDrive", "Internal" },
            { "Button/IsPressed", "True if the button is being pressed" },
            { "Button/IsHovering", "True if someone is hovering over the button" },
            { "Button/HoverVibrate", "How a controller should vibrate when hovering over this button" },
            { "Button/PressVibrate", "How a controller should vibrate when pressing this button" },
            { "Button/ClearFocusOnPress", "Makes the button stop being hovered when a press occurs" },
            { "Button/PassThroughHorizontalMovement", "FIXME" }, { "Button/PassThroughVerticalMovement", "FIXME" },
            { "Button/RequireLockInToPress", "FIXME" }, { "Button/RequireInitialPress", "FIXME" },
            { "Button/PressPoint", "FIXME" }, { "Button/Pressed", "Internal" }, { "Button/Pressing", "Internal" },
            { "Button/Released", "Internal" }, { "Button/HoverEnter", "Internal" }, { "Button/HoverStay", "Internal" },
            { "Button/HoverLeave", "Internal" },
            { "Checkbox/persistent", "Determines whether or not this item will be saved to the server." },
            { "Checkbox/UpdateOrder", "Controls the order in which this component is updated" },
            { "Checkbox/Enabled", "Controls whether or not this component is enabled" },
            { "Checkbox/TargetState", "The Bool field to drive with the state of the checkbox" },
            {
                "Checkbox/CheckVisual",
                "The Bool field controlling visibility of the visual to display when the checkbox is in the checked state"
            },
            { "Expander/persistent", "Determines whether or not this item will be saved to the server." },
            { "Expander/UpdateOrder", "Controls the order in which this component is updated" },
            { "Expander/Enabled", "Controls whether or not this component is enabled" },
            { "InteractionBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "InteractionBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "InteractionBlock/Enabled", "Controls whether or not this component is enabled" },
            { "ModalOverlay/persistent", "Determines whether or not this item will be saved to the server." },
            { "ModalOverlay/UpdateOrder", "Controls the order in which this component is updated" },
            { "ModalOverlay/Enabled", "Controls whether or not this component is enabled" },
            { "ModalOverlayManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "ModalOverlayManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "ModalOverlayManager/Enabled", "Controls whether or not this component is enabled" },
            { "ProgressBar/persistent", "Determines whether or not this item will be saved to the server." },
            { "ProgressBar/UpdateOrder", "Controls the order in which this component is updated" },
            { "ProgressBar/Enabled", "Controls whether or not this component is enabled" },
            { "ProgressBar/Progress", "The normalized progression the of value" },
            { "ProgressBar/AnchorMinOffset", "UIX Anchor minimum offset" },
            { "ProgressBar/AnchorMaxOffset", "UIX Anchor maximum offset" },
            { "ProgressBar/AnchorMin", "UIX Anchor minimum offset reference input" },
            { "ProgressBar/AnchorMax", "UIX Anchor maximum offset reference input" },
            { "ProgressBar/Power", "Modifies the Power of the progress bar" },
            { "RadiantModalOverlay/persistent", "Determines whether or not this item will be saved to the server." },
            { "RadiantModalOverlay/UpdateOrder", "Controls the order in which this component is updated" },
            { "RadiantModalOverlay/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceGrabReceiver/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceGrabReceiver/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceGrabReceiver/Enabled", "Controls whether or not this component is enabled" },
            { "ReferenceProxySource/persistent", "Determines whether or not this item will be saved to the server." },
            { "ReferenceProxySource/UpdateOrder", "Controls the order in which this component is updated" },
            { "ReferenceProxySource/Enabled", "Controls whether or not this component is enabled" },
            { "ScrollRect/persistent", "Determines whether or not this item will be saved to the server." },
            { "ScrollRect/UpdateOrder", "Controls the order in which this component is updated" },
            { "ScrollRect/Enabled", "Controls whether or not this component is enabled" },
            {
                "ScrollRect/NormalizedPosition",
                "The scroll position between (0,0) and (1,1) with (0,0) being the lower left corner."
            },
            { "TextField/persistent", "Determines whether or not this item will be saved to the server." },
            { "TextField/UpdateOrder", "Controls the order in which this component is updated" },
            { "TextField/Enabled", "Controls whether or not this component is enabled" },
            { "TextField/Editor", "A reference to the text editor component." },
            { "ArcLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "ArcLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "ArcLayout/Enabled", "Controls whether or not this component is enabled" },
            { "ArcSegmentLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "ArcSegmentLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "ArcSegmentLayout/Enabled", "Controls whether or not this component is enabled" },
            { "AspectRatioFitter/persistent", "Determines whether or not this item will be saved to the server." },
            { "AspectRatioFitter/UpdateOrder", "Controls the order in which this component is updated" },
            { "AspectRatioFitter/Enabled", "Controls whether or not this component is enabled" },
            { "ContentSizeFitter/persistent", "Determines whether or not this item will be saved to the server." },
            { "ContentSizeFitter/UpdateOrder", "Controls the order in which this component is updated" },
            { "ContentSizeFitter/Enabled", "Controls whether or not this component is enabled" },
            { "ContentSizeFitter/HorizontalFit", "The fit mode to use to determine the width." },
            { "ContentSizeFitter/VerticalFit", "The fit mode to use to determine the height." },
            { "FixedRectFitterLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "FixedRectFitterLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "FixedRectFitterLayout/Enabled", "Controls whether or not this component is enabled" },
            { "GraphicChunkRoot/persistent", "Determines whether or not this item will be saved to the server." },
            { "GraphicChunkRoot/UpdateOrder", "Controls the order in which this component is updated" },
            { "GraphicChunkRoot/Enabled", "Controls whether or not this component is enabled" },
            { "GridLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "GridLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "GridLayout/Enabled", "Controls whether or not this component is enabled" },
            { "HorizontalLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "HorizontalLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "HorizontalLayout/Enabled", "Controls whether or not this component is enabled" },
            { "HorizontalLayout/PaddingTop", "The padding to add}, {in pixels}, {at the top of the entire layout." },
            {
                "HorizontalLayout/PaddingRight", "The padding to add}, {in pixels}, {at the right of the entire layout."
            },
            {
                "HorizontalLayout/PaddingBottom",
                "The padding to add}, {in pixels}, {at the bottom of the entire layout."
            },
            { "HorizontalLayout/PaddingLeft", "The padding to add}, {in pixels}, {at the left of the entire layout." },
            { "HorizontalLayout/Spacing", "The padding to add}, {in pixels}, {between each object." },
            {
                "HorizontalLayout/HorizontalAlign",
                "The horizontal alignment to use for the child objects in the layout."
            },
            { "HorizontalLayout/VerticalAlign", "The vertical alignment to use for the child objects in the layout." },
            {
                "HorizontalLayout/ForceExpandWidth",
                "Whether to force the children to expand to fill the available horizontal space."
            },
            {
                "HorizontalLayout/ForceExpandHeight",
                "Whether to force the children to expand to fill the available vertical space."
            },
            { "IgnoreLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "IgnoreLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "IgnoreLayout/Enabled", "Controls whether or not this component is enabled" },
            { "LayoutElement/persistent", "Determines whether or not this item will be saved to the server." },
            { "LayoutElement/UpdateOrder", "Controls the order in which this component is updated" },
            { "LayoutElement/Enabled", "Controls whether or not this component is enabled" },
            { "LayoutElement/MinWidth", "The minimum width for this LayoutElement." },
            { "LayoutElement/PreferredWidth", "The preferred width for this LayoutElement." },
            {
                "LayoutElement/FlexibleWidth",
                "If there is any space left over after layouting}, {the width is used as a weight to decide what width should given to this LayoutElement."
            },
            { "LayoutElement/MinHeight", "The minimum height for this LayoutElement." },
            { "LayoutElement/PreferredHeight", "The preferred height for this LayoutElement." },
            {
                "LayoutElement/FlexibleHeight",
                "If there is any space left over after layouting}, {the height is used as a weight to decide what height should be given to this LayoutElement."
            },
            { "LayoutElement/Area", "Currently unused." },
            { "LayoutElement/Priority", "The priority for this LayoutElement." },
            {
                "LayoutElement/UseZeroMetrics",
                "If checked}, {it allows \"0\" to be used in the other properties within this component."
            },
            { "VerticalLayout/persistent", "Determines whether or not this item will be saved to the server." },
            { "VerticalLayout/UpdateOrder", "Controls the order in which this component is updated" },
            { "VerticalLayout/Enabled", "Controls whether or not this component is enabled" },
            { "VerticalLayout/PaddingTop", "The padding to add}, {in pixels}, {at the top of the entire layout." },
            { "VerticalLayout/PaddingRight", "The padding to add}, {in pixels}, {at the right of the entire layout." },
            {
                "VerticalLayout/PaddingBottom", "The padding to add}, {in pixels}, {at the bottom of the entire layout."
            },
            { "VerticalLayout/PaddingLeft", "The padding to add}, {in pixels}, {at the left of the entire layout." },
            { "VerticalLayout/Spacing", "The padding to add}, {in pixels}, {between each object." },
            {
                "VerticalLayout/HorizontalAlign", "The horizontal alignment to use for the child objects in the layout."
            },
            { "VerticalLayout/VerticalAlign", "The vertical alignment to use for the child objects in the layout." },
            {
                "VerticalLayout/ForceExpandWidth",
                "Whether to force the children to expand to fill the available horizontal space."
            },
            {
                "VerticalLayout/ForceExpandHeight",
                "Whether to force the children to expand to fill the available vertical space."
            },
            {
                "AxisMultiViewportPanner/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "AxisMultiViewportPanner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisMultiViewportPanner/Enabled", "Controls whether or not this component is enabled" },
            {
                "ProjectedRectSlotDriver/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "ProjectedRectSlotDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "ProjectedRectSlotDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RectSizeDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "RectSizeDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "RectSizeDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RectSlotDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "RectSlotDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "RectSlotDriver/Enabled", "Controls whether or not this component is enabled" },
            { "RectTransformLerp/persistent", "Determines whether or not this item will be saved to the server." },
            { "RectTransformLerp/UpdateOrder", "Controls the order in which this component is updated" },
            { "RectTransformLerp/Enabled", "Controls whether or not this component is enabled" },
            { "SlideSwapRegion/persistent", "Determines whether or not this item will be saved to the server." },
            { "SlideSwapRegion/UpdateOrder", "Controls the order in which this component is updated" },
            { "SlideSwapRegion/Enabled", "Controls whether or not this component is enabled" },
            { "Canvas/persistent", "Determines whether or not this item will be saved to the server." },
            { "Canvas/UpdateOrder", "Controls the order in which this component is updated" },
            { "Canvas/Enabled", "Controls whether or not this component is enabled" },
            { "Canvas/Size", "The dimensions of the canvas. At normal scale}, {this is equivalent to meters." },
            { "Canvas/EditModeOnly", "FIXME" },
            { "Canvas/AcceptRemoteTouch", "Makes the canvas accepts laser touches" },
            { "Canvas/AcceptPhysicalTouch", "Makes the canvas accepts direct touches" },
            { "Canvas/AcceptExistingTouch", "FIXME" }, { "Canvas/HighPriorityIntegration", "FIXME" },
            { "Canvas/IgnoreTouchesFromBehind", "Makes the canvas ignore all touches from behind" },
            { "Canvas/BlockAllInteractions", "Prevents any interaction if enabled" },
            { "Canvas/LaserPassThrough", "Allows the laser to go through the canvas" },
            { "Canvas/PixelScale", "FIXME" }, { "Canvas/_rootRect", "Internal" },
            { "Canvas/Collider", "The collider that receives touches" }, { "Canvas/_colliderSize", "Internal" },
            { "Canvas/_colliderOffset", "Internal" }, { "Canvas/StartingOffset", "FIXME" },
            { "Canvas/StartingMaskDepth", "FIXME" },
            { "NestedCanvas/persistent", "Determines whether or not this item will be saved to the server." },
            { "NestedCanvas/UpdateOrder", "Controls the order in which this component is updated" },
            { "NestedCanvas/Enabled", "Controls whether or not this component is enabled" },
            { "RectTransform/persistent", "Determines whether or not this item will be saved to the server." },
            { "RectTransform/UpdateOrder", "Controls the order in which this component is updated" },
            { "RectTransform/Enabled", "Controls whether or not this component is enabled" },
            {
                "RectTransform/AnchorMin",
                "The normalized position (0 to 1) in the parent object that the lower left corner is anchored to."
            },
            {
                "RectTransform/AnchorMax",
                "The normalized position (0 to 1) in the parent object that the upper right corner is anchored to."
            },
            {
                "RectTransform/OffsetMin",
                "The offset of the lower left corner of the rectangle relative to the lower left anchor}, {in pixels."
            },
            {
                "RectTransform/OffsetMax",
                "The offset of the upper right corner of the rectangle relative to the upper right anchor}, {in pixels."
            },
            { "RectTransform/Pivot", "The normalized position in this rectangle that it rotates around." },
            { "AssetMetadata/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetMetadata/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetMetadata/Enabled", "Controls whether or not this component is enabled" },
            { "AssetProxy/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetProxy/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetProxy/Enabled", "Controls whether or not this component is enabled" },
            {
                "AudioInputDeviceSelection/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AudioInputDeviceSelection/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioInputDeviceSelection/Enabled", "Controls whether or not this component is enabled" },
            {
                "AudioOutputDeviceSelection/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AudioOutputDeviceSelection/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioOutputDeviceSelection/Enabled", "Controls whether or not this component is enabled" },
            { "AudioStreamController/persistent", "Determines whether or not this item will be saved to the server." },
            { "AudioStreamController/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioStreamController/Enabled", "Controls whether or not this component is enabled" },
            {
                "AudioTypeGroupVolumeSlider/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AudioTypeGroupVolumeSlider/UpdateOrder", "Controls the order in which this component is updated" },
            { "AudioTypeGroupVolumeSlider/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarCreator/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarCreator/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarCreator/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarEquipBlock/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarEquipBlock/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarEquipBlock/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarParentNode/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarParentNode/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarParentNode/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarUserPositioner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarUserPositioner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarUserPositioner/Enabled", "Controls whether or not this component is enabled" },
            { "AxisRotationGizmo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AxisRotationGizmo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisRotationGizmo/Enabled", "Controls whether or not this component is enabled" },
            { "AxisTranslationGizmo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AxisTranslationGizmo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AxisTranslationGizmo/Enabled", "Controls whether or not this component is enabled" },
            { "BagEditor/persistent", "Determines whether or not this item will be saved to the server." },
            { "BagEditor/UpdateOrder", "Controls the order in which this component is updated" },
            { "BagEditor/Enabled", "Controls whether or not this component is enabled" },
            { "BagEditorItem/persistent", "Determines whether or not this item will be saved to the server." },
            { "BagEditorItem/UpdateOrder", "Controls the order in which this component is updated" },
            { "BagEditorItem/Enabled", "Controls whether or not this component is enabled" },
            { "BatchAction/persistent", "Determines whether or not this item will be saved to the server." },
            { "BatchAction/UpdateOrder", "Controls the order in which this component is updated" },
            { "BatchAction/Enabled", "Controls whether or not this component is enabled" },
            { "BezierCurve/persistent", "Determines whether or not this item will be saved to the server." },
            { "BezierCurve/UpdateOrder", "Controls the order in which this component is updated" },
            { "BezierCurve/Enabled", "Controls whether or not this component is enabled" },
            {
                "BlendshapeWeightListEditor/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "BlendshapeWeightListEditor/UpdateOrder", "Controls the order in which this component is updated" },
            { "BlendshapeWeightListEditor/Enabled", "Controls whether or not this component is enabled" },
            { "BooleanMemberEditor/persistent", "Determines whether or not this item will be saved to the server." },
            { "BooleanMemberEditor/UpdateOrder", "Controls the order in which this component is updated" },
            { "BooleanMemberEditor/Enabled", "Controls whether or not this component is enabled" },
            { "Bounds/persistent", "Determines whether or not this item will be saved to the server." },
            { "Bounds/UpdateOrder", "Controls the order in which this component is updated" },
            { "Bounds/Enabled", "Controls whether or not this component is enabled" },
            { "BoxColliderGizmo/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxColliderGizmo/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxColliderGizmo/Enabled", "Controls whether or not this component is enabled" },
            { "BoxGizmo/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxGizmo/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxGizmo/Enabled", "Controls whether or not this component is enabled" },
            { "BoxMeshGizmo/persistent", "Determines whether or not this item will be saved to the server." },
            { "BoxMeshGizmo/UpdateOrder", "Controls the order in which this component is updated" },
            { "BoxMeshGizmo/Enabled", "Controls whether or not this component is enabled" },
            {
                "BrowserCreateDirectorDialog/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "BrowserCreateDirectorDialog/UpdateOrder", "Controls the order in which this component is updated" },
            { "BrowserCreateDirectorDialog/Enabled", "Controls whether or not this component is enabled" },
            { "BuiltInMaterial/persistent", "Determines whether or not this item will be saved to the server." },
            { "BuiltInMaterial/UpdateOrder", "Controls the order in which this component is updated" },
            { "BuiltInMaterial/Enabled", "Controls whether or not this component is enabled" },
            { "CallbackRefArgument/persistent", "Determines whether or not this item will be saved to the server." },
            { "CallbackRefArgument/UpdateOrder", "Controls the order in which this component is updated" },
            { "CallbackRefArgument/Enabled", "Controls whether or not this component is enabled" },
            { "CommonTool/persistent", "Determines whether or not this item will be saved to the server." },
            { "CommonTool/UpdateOrder", "Controls the order in which this component is updated" },
            { "CommonTool/Enabled", "Controls whether or not this component is enabled" },
            { "CommonTool/Side", "Specifies Left or Right Hand" },
            {
                "ItemTextureThumbnailSource/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "ItemTextureThumbnailSource/UpdateOrder", "Controls the order in which this component is updated" },
            { "ItemTextureThumbnailSource/Enabled", "Controls whether or not this component is enabled" },
            {
                "ItemTextureThumbnailSource/Texture",
                "The texture that should be used as the item's inventory preview. If null}, {the component will be ignored."
            },
            {
                "ItemTextureThumbnailSource/Crop",
                "The rectangle that defines what section of the image to use. (Or null to use the entire image)"
            },
            { "VRIK/persistent", "Determines whether or not this item will be saved to the server." },
            { "VRIK/UpdateOrder", "Controls the order in which this component is updated" },
            { "VRIK/Enabled", "Controls whether or not this component is enabled" },
            { "VRIK/FixTransformsEnabled", "Clamps IK transforms to reasonable values and Resets IK every update." },
            { "VRIK/IKPositionWeight", "Weight of the IK" }, { "VRIK/DebugVisuals", "Enables Debug visuals" },
            {
                "VRIK/PlantFeet",
                "When enabled feet positions will be prioritized over anything else including HeadTarget. (Causes issues with walking) If true}, {will keep the toes planted even if the HeadTarget is out of reach}, {so this can cause the camera to exit the head if it is too high for the model to reach."
            },
            {
                "VRIK/spine.HeadTarget",
                "Typically the position and rotation of the HMD tracker. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the Head slot of the User is used."
            },
            {
                "VRIK/spine.PelvisTarget",
                "Typically the position and rotation of the hip tracker. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the hip tracker slot of the User is used."
            },
            { "VRIK/spine.PositionWeight", "Positional weight of the HeadTarget." },
            { "VRIK/spine.RotationWeight", "Rotational weight of the HeadTarget." },
            { "VRIK/spine.PelvisPositionWeight", "Positional weight of the PelvisTarget." },
            { "VRIK/spine.PelvisRotationWeight", "Rotational weight of the PelvisTarget." },
            {
                "VRIK/spine.ChestGoal",
                "If ChestGoalWeightis greater than 0}, {the chest will be turned towards this slot."
            },
            { "VRIK/spine.ChestGoalWeight", "Weight of turning the chest towards the ChestGoal." },
            { "VRIK/spine.MinHeadHeight", "Minimum Head height allowed by the IK solver (Nonfunctional)" },
            { "VRIK/spine.BodyPosStiffness", "How much the body will try to move with the HeadTarget." },
            { "VRIK/spine.BodyRotStiffness", "How much the body will try to rotate with the HeadTarget." },
            { "VRIK/spine.NeckStiffness", "How much the chest will rotate when the head is rotated." },
            { "VRIK/spine.RotateChestByHands", "How much the chest rotates based on hand movement." },
            {
                "VRIK/spine.ChestClampWeight",
                "How much the chest can rotate relative to the head with 0 being full movement and 1 being no movement. A value of 0.5 allows 90 degrees of rotation for the chest relative to the head. A value of 0 allows 180 degrees and a value of 1 means the chest will be locked relative to the head."
            },
            {
                "VRIK/spine.HeadClampWeight",
                "How much the head can rotate relative to the HeadTarget with 0 being full movement and 1 being no movement. A value of 0.5 allows 90 degrees of rotation for the head relative to the HeadTarget. A value of 0 allows 180 degrees and a value of 1 means head rotation will be locked to the HeadTarget."
            },
            { "VRIK/spine.MoveBodyBackWhenCrouching", "How much the body will move backwards when crouching" },
            {
                "VRIK/spine.MaintainPelvisPosition",
                "How much the pelvis will move with the feet instead of the HeadTarget."
            },
            {
                "VRIK/spine.MaxRootAngle",
                "How much the HeadTarget must rotate for the whole body to rotate (in degrees)."
            },
            { "VRIK/spine.IKPositionHead", "The solved position for the head. Driven." },
            { "VRIK/spine.IKRotationHead", "The solved rotation for the head. Driven." },
            { "VRIK/spine.IKPositionPelvis", "The solved position for the pelvis. Driven." },
            { "VRIK/spine.IKRotationPelvis", "The solved rotation for the pelvis. Driven." },
            { "VRIK/spine.GoalPositionChest", "The solved goal position for the chest. Driven." },
            { "VRIK/spine.headHeight", "Head height while standing. Used for calculating MoveBodyBackWhenCrouching." },
            { "VRIK/spine.anchorRelativeToHead", "Root rotation relative to HeadTarget." },
            { "VRIK/spine.pelvisRelativeRotation", "Pelvis rotation relative to HeadTarget." },
            { "VRIK/spine.chestRelativeRotation", "Chest rotation relative to HeadTarget." },
            { "VRIK/spine.chestForward", "Chest Forward Vector" },
            { "VRIK/spine.pelvisForward", "Pelvis Forward Vector" },
            {
                "VRIK/leftArm.Target",
                "The target for the left hand. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the Left Hand slot of the User is used."
            },
            { "VRIK/leftArm.BendGoal", "The left elbow will be bent towards this slot if BendGoalWeight > 0." },
            { "VRIK/leftArm.PositionWeight", "Positional weight of the Target." },
            { "VRIK/leftArm.RotationWeight", "Rotational weight of the Target." },
            {
                "VRIK/leftArm.ShoulderRotationMode",
                "Shoulder rotation method. Pitch/yaw is more accurate}, {while From/to is simpler."
            },
            { "VRIK/leftArm.ShoulderRotationWeight", "How much the left shoulder should move based on Hand position." },
            { "VRIK/leftArm.BendGoalWeight", "if greater than 0}, {will bend the elbow towards the BendGoal slot." },
            { "VRIK/leftArm.SwivelOffset", "Rotation offset for the left elbow in degrees." },
            {
                "VRIK/leftArm.WristToPalmAxis",
                "Palm Direction; local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. (Higher values on the Y axis increase the amount the arms move with your controllers)"
            },
            {
                "VRIK/leftArm.PalmToThumbAxis",
                "Thumb Direction; local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation."
            },
            {
                "VRIK/leftArm.ArmLengthMlp",
                "Arm Length Multiplier. Used to make the arm shorter/longer. Works by displacement of hand and forearm local position."
            },
            {
                "VRIK/leftArm.StretchCurve",
                "Unsupported. Would evaluate stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length)."
            },
            { "VRIK/leftArm.IKPosition", "The solved position for the left hand. Driven." },
            { "VRIK/leftArm.IKRotation", "The solved rotation for the left hand. Driven." },
            { "VRIK/leftArm.BendGoalPosition", "The solved position for the bend goal. Driven." },
            { "VRIK/leftArm.TwistRelaxWeight", "How much the forearm twists towards the wrist" },
            { "VRIK/leftArm.TwistCrossfade", "Weight of the forearm twisting" },
            { "VRIK/leftArm.TwistAngleOffset", "Angle offset of the forearm twisting" },
            {
                "VRIK/rightArm.Target",
                "The target for the right hand. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the Right Hand slot of the User is used."
            },
            { "VRIK/rightArm.BendGoal", "The right elbow will be bent towards this slot if BendGoalWeight > 0." },
            { "VRIK/rightArm.PositionWeight", "Positional weight of the Target." },
            { "VRIK/rightArm.RotationWeight", "Rotational weight of the Target." },
            {
                "VRIK/rightArm.ShoulderRotationMode",
                "Shoulder rotation method. Pitch/yaw is more accurate}, {while From/to is simpler."
            },
            {
                "VRIK/rightArm.ShoulderRotationWeight",
                "How much the right shoulder should move based on Hand position."
            },
            { "VRIK/rightArm.BendGoalWeight", "if greater than 0}, {will bend the elbow towards the BendGoal slot." },
            { "VRIK/rightArm.SwivelOffset", "Rotation offset for the right elbow in degrees." },
            {
                "VRIK/rightArm.WristToPalmAxis",
                "Palm Direction; local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. (Higher values on the Y axis increase the amount the arms move with your controllers)"
            },
            {
                "VRIK/rightArm.PalmToThumbAxis",
                "Thumb Direction; local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation."
            },
            {
                "VRIK/rightArm.ArmLengthMlp",
                "Arm Length Multiplier. Used to make the arm shorter/longer. Works by displacement of hand and forearm local position."
            },
            {
                "VRIK/rightArm.StretchCurve",
                "Unsupported. Would evaluate stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length)."
            },
            { "VRIK/rightArm.IKPosition", "The solved position for the right hand. Driven." },
            { "VRIK/rightArm.IKRotation", "The solved rotation for the right hand. Driven." },
            { "VRIK/rightArm.BendGoalPosition", "The solved position for the bend goal. Driven." },
            { "VRIK/rightArm.TwistRelaxWeight", "How much the forearm twists towards the wrist" },
            { "VRIK/rightArm.TwistCrossfade", "Weight of the forearm twisting" },
            { "VRIK/rightArm.TwistAngleOffset", "Angle offset of the forearm twisting" },
            {
                "VRIK/leftLeg.Target",
                "The target for the left foot/toe. This isn't the left foot tracker itself}, {but a child Slot parented to it so you could adjust its position/rotation to match the orientation of the foot/toe bone. If LeftToes is assigned}, {the solver will match the left toe bone to this target. If no LeftToes is assigned}, {LeftFoot will be used instead. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the left foot slot of the User is used."
            },
            { "VRIK/leftLeg.BendGoalPosition", "The solved position for the bend goal. Driven." },
            { "VRIK/leftLeg.BendGoal", "The left knee will be bent towards this slot if BendGoalWeight > 0." },
            { "VRIK/leftLeg.PositionWeight", "Positional weight of the Target." },
            { "VRIK/leftLeg.RotationWeight", "Rotational weight of the Target." },
            {
                "VRIK/leftLeg.BendGoalWeight", "if greater than 0}, {will bend the left knee towards the BendGoal slot."
            },
            { "VRIK/leftLeg.SwivelOffset", "Rotation offset for the left knee in degrees." },
            { "VRIK/leftLeg.IKPosition", "The solved position for the left foot/toe. Driven." },
            { "VRIK/leftLeg.IKRotation", "The solved rotation for the left foot/toe. Driven." },
            {
                "VRIK/rightLeg.Target",
                "The target for the right foot/toe. This isn't the right foot tracker itself}, {but a child Slot parented to it so you could adjust its position/rotation to match the orientation of the foot/toe bone. If RightToes is assigned}, {the solver will match the left toe bone to this target. If no RightToes is assigned}, {RightFoot will be used instead. Note, on my own avatar}, {this is set to null. It's possible that this value isn't used}, {and instead the right foot slot of the User is used."
            },
            { "VRIK/rightLeg.BendGoalPosition", "The solved position for the bend goal. Driven." },
            { "VRIK/rightLeg.BendGoal", "The right knee will be bent towards this slot if BendGoalWeight > 0." },
            { "VRIK/rightLeg.PositionWeight", "Positional weight of the Target." },
            { "VRIK/rightLeg.RotationWeight", "Rotational weight of the Target." },
            {
                "VRIK/rightLeg.BendGoalWeight",
                "if greater than 0}, {will bend the right knee towards the BendGoal slot."
            },
            { "VRIK/rightLeg.SwivelOffset", "Rotation offset for the right knee in degrees." },
            { "VRIK/rightLeg.IKPosition", "The solved position for the right foot/toe. Driven." },
            { "VRIK/rightLeg.IKRotation", "The solved rotation for the right foot/toe. Driven." },
            {
                "VRIK/locomotion.FootDistance",
                "Tries to maintain this distance between where each foot will attempt to plant themselves."
            },
            {
                "VRIK/locomotion.StepThreshold",
                "How far you have to move for the feet to take a step (re-plant themselves)."
            },
            {
                "VRIK/locomotion.AngleThreshold",
                "How much you have to rotate for the feet to take a step (re-plant themselves)."
            },
            {
                "VRIK/locomotion.ComAngleMlp",
                "Multiplier angle of the (center of mass minus the center of pressure) vector. Larger value makes the character step sooner if losing balance."
            },
            { "VRIK/locomotion.MaxVelocity", "Maximum magnitude of head/hand target velocity for prediction." },
            {
                "VRIK/locomotion.VelocityFactor",
                "How much the feet will use your current head/hand target velocity to predict where you're stepping."
            },
            {
                "VRIK/locomotion.MaxLegStretch",
                "How much your leg can stretch before it attempts to take a step. 1 means fully stretched."
            },
            {
                "VRIK/locomotion.RootSpeed",
                "How fast the pelvis and legs will move to catch up to the HMD; the speed of lerping the root of the character towards the horizontal mid-point of the footsteps."
            },
            {
                "VRIK/locomotion.StepSpeed",
                "How fast the foot planter will move the feet to their new position when re-planting"
            },
            { "VRIK/locomotion.StepHeight", "The height of the foot by normalized step progress (0 - 1)." },
            { "VRIK/locomotion.HeelHeight", "The height offset of the heel by normalized step progress (0 - 1)." },
            {
                "VRIK/locomotion.RelaxLegTwistMinAngle",
                "How much your HMD has to rotate before your feet begin to rotate towards your HMD without stepping; rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle."
            },
            {
                "VRIK/locomotion.RelaxLegTwistSpeed",
                "How fast the feet can rotate while on the ground; the speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg."
            },
            { "VRIK/locomotion.StepInterpolation", "The type of interpolation the feet will use during stepping." },
            { "VRIK/locomotion.Offset", "Offset for feet planting relative to your HMD" },
            { "VRIK/locomotion.OnLeftFootstep", "Non-Functional WorldDelegate" },
            { "VRIK/locomotion.OnRightFootstep", "Non-Functional WorldDelegate" },
            { "VRIK/ForwardFlipped", "Swaps the feet" },
            { "VRIK/ForceRootHeight", "Foot planting height override (Negative numbers cause issues with walking)" },
            { "AvatarAnchor/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarAnchor/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAnchor/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarAnchor/Highlight", "TBD" },
            {
                "AvatarAnchor/LocalSpace",
                "The coordinate space in which to work with the avatar. Leaving this blank uses the world root; using a slot will cause the avatar to be scaled if that slot is called."
            },
            { "AvatarAnchor/UseParentSpace", "Use the parent of the specified slot}, {rather than the slot itself." },
            { "AvatarAnchor/OverrideRootSpace", "TBD" },
            {
                "AvatarAnchor/MinScale",
                "If an avatar has a scale below the MinScale}, {it will be scaled up to that size."
            },
            {
                "AvatarAnchor/MaxScale",
                "If an avatar has a scale above the MaxScale}, {it will be scaled down to that size."
            },
            { "AvatarAnchor/PositionNode", "Which part of the avatar to use to position the avatar." },
            { "AvatarAnchor/PositionReference", "Where to position the avatar to." },
            { "AvatarAnchor/RotationNode", "Which part of the avatar to use to rotate the avatar." },
            { "AvatarAnchor/RotationReference", "Where to rotate the avatar relative to." },
            { "AvatarAnchor/PreserveUpOnEnter", "TBD" }, { "AvatarAnchor/PreserveUpOnExit", "TBD" },
            { "AvatarAnchor/UnparentEverythingOnDestroy", "TBD" }, { "AvatarAnchor/TransformRestoreMode", "TBD" },
            { "AvatarAnchor/RestoreNode", "TBD" }, { "AvatarAnchor/RestoreReference", "TBD" },
            {
                "AvatarAnchor/Filters",
                "A list of pose filters to use. Each one can control the position of a specific body node"
            },
            { "AvatarAnchor/UserFilters", "TBD" }, { "AvatarAnchor/UserAnchored", "Internal" },
            { "AvatarAnchor/UserReleased", "Internal" }, { "AvatarAnchor/LocomotionUpdate", "Internal" },
            { "AvatarAnchor/_originalSpace", "Internal" }, { "AvatarAnchor/_originalPosition", "Internal" },
            { "AvatarAnchor/_originalRotation", "Internal" }, { "AvatarAnchor/_originalScale", "Internal" },
            { "AvatarAnchor/_dummyObjectSlots", "Internal" },
            {
                "AvatarAnchorDestroyOnRelease/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarAnchorDestroyOnRelease/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAnchorDestroyOnRelease/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarAnchorLocomotionRelease/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarAnchorLocomotionRelease/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAnchorLocomotionRelease/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarAnchorTouchTrigger/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarAnchorTouchTrigger/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAnchorTouchTrigger/Enabled", "Controls whether or not this component is enabled" },
            { "MultiUserAvatarAnchor/persistent", "Determines whether or not this item will be saved to the server." },
            { "MultiUserAvatarAnchor/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiUserAvatarAnchor/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarAudioConfiguration/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarAudioConfiguration/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAudioConfiguration/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarAudioOutputManager/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarAudioOutputManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarAudioOutputManager/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarVoiceInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarVoiceInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarVoiceInfo/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarVoiceRangeVisualizer/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarVoiceRangeVisualizer/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarVoiceRangeVisualizer/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarVoiceSourceAssigner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarVoiceSourceAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarVoiceSourceAssigner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarVoiceSourceAssigner/TargetReference",
                "Target IAudioSource that will be assigned the user's audio stream"
            },
            { "AvatarExpressionDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarExpressionDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarExpressionDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarEyeDataSourceAssigner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarEyeDataSourceAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarEyeDataSourceAssigner/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarEyeTrackingInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarEyeTrackingInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarEyeTrackingInfo/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarMouthDataSourceAssigner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarMouthDataSourceAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarMouthDataSourceAssigner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarMouthTrackingInfo/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "AvatarMouthTrackingInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarMouthTrackingInfo/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarRawEyeData/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarRawEyeData/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarRawEyeData/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarRawMouthData/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarRawMouthData/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarRawMouthData/Enabled", "Controls whether or not this component is enabled" },
            { "EyeLinearDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "EyeLinearDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "EyeLinearDriver/Enabled", "Controls whether or not this component is enabled" },
            { "EyeManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "EyeManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "EyeManager/Enabled", "Controls whether or not this component is enabled" },
            { "EyeManager/EyeDataSource", "Eye tracking data" },
            { "EyeManager/SimulatingUser", "Determines the user simulating the eye manager" },
            { "EyeManager/SimulateOnHost", "Determines if the eye manager is simulated by the host" },
            { "EyeManager/IgnoreLocalUserHead", "Determines if the eye manager should ignore the local user's head" },
            { "EyeManager/UserHeadWeight", "Weight for looking at other user heads" },
            { "EyeManager/UserHandWeight", "Weight for looking at hands" },
            { "EyeManager/GrippingHandWeight", "Weight for looking at hands that are gripping" },
            { "EyeManager/CameraWeight", "Weight for looking at cameras" },
            { "EyeManager/ForcedCameraWeight", "Weight for looking at cameras that are forcing eyes to look at it" },
            { "EyeManager/EyeReference", "Slot that is used for referencing the origin of eye tracking data" },
            { "EyeManager/EyeSeparation", "Seperation of the eyes" },
            { "EyeManager/SaccadeSpeed", "Speed the eyes move during saccades (does not affect eye tracking)" },
            { "EyeManager/LookTargetRoot", "Slot that the eyes should look at" },
            { "EyeManager/MinRandomSaccadeInterval", "Minimum time in seconds between random saccades" },
            { "EyeManager/MaxRandomSaccadeInterval", "Maximum time in seconds between random saccades" },
            { "EyeManager/MinTargetSaccadeInterval", "Minimum time in seconds between Targeting saccades" },
            { "EyeManager/MaxTargetSaccadeInterval", "Maximum time in seconds between Targeting saccades" },
            {
                "EyeManager/MaxRandomSaccadeOffset",
                "Maximum distance the eyes can randomly saccade off of the center of a target"
            },
            { "EyeManager/DefaultAcceptAngle", "Maximum acceptance angle for random objects" },
            { "EyeManager/DefaultBreakAngle", "Maximum angle before breaking eye contact with random objects" },
            { "EyeManager/HeadAcceptAngle", "Maximum acceptance angle for Players" },
            { "EyeManager/HeadBreakAngle", "Maximum angle before breaking eye contact with Players" },
            { "EyeManager/CameraAcceptAngle", "Maximum acceptance angle for cameras" },
            { "EyeManager/CameraBreakAngle", "Maximum angle before breaking eye contact with cameras" },
            { "EyeManager/HandAcceptAngle", "Maximum acceptance angle for hands" },
            { "EyeManager/HandBreakAngle", "Maximum angle before breaking eye contact with hands" },
            { "EyeManager/LeftEyeCloseOverride", "Overrides the left eyelid when open" },
            { "EyeManager/RightEyeCloseOverride", "Overrides the right eyelid when open" },
            { "EyeManager/MinBlinkInterval", "Minimum interval between blinks in seconds" },
            { "EyeManager/MaxBlinkInterval", "Maximum interval between blinks in seconds" },
            { "EyeManager/BlinkMinSpeed", "Minimum Speed for blinks" },
            { "EyeManager/BlinkMaxSpeed", "Maximum Speed for blinks" },
            { "EyeManager/MinPupilSize", "Minimum pupil size" }, { "EyeManager/MaxPupilSize", "Maximum pupil size" },
            { "EyeManager/PupilSizeNoiseSpeed", "How fast the random pupil noise will move" },
            { "EyeManager/EyeTrackingPupilSizeSmoothSpeed", "Smooth speed for tracked pupil dilation" },
            { "EyeManager/MiniExpressionProbability", "chance for a miniexpression to occur" },
            { "EyeManager/MiniExpressionInterval", "Interval between attempting to do a miniexpression" },
            { "EyeRotationDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "EyeRotationDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "EyeRotationDriver/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarFingerPoseInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarFingerPoseInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarFingerPoseInfo/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarHandDataAssigner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarHandDataAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarHandDataAssigner/Enabled", "Controls whether or not this component is enabled" },
            { "HandPoser/persistent", "Determines whether or not this item will be saved to the server." },
            { "HandPoser/UpdateOrder", "Controls the order in which this component is updated" },
            { "HandPoser/Enabled", "Controls whether or not this component is enabled" },
            { "HandPoser/PoseSource", "What the finger transform data is derived from." },
            { "HandPoser/Side", "Which hand this poser is representing" },
            { "HandPoser/PoseMetacarpals", "If metacarpals should be posed (this should normally be left as True)" },
            { "HandPoser/HandRoot", "The root of the hand (if null the slot the component is attached to is used)" },
            { "HandPoser/HandForward", "A unit vector pointing forward from the wrist to the fingers." },
            {
                "HandPoser/HandUp",
                "A unit vector pointing from the back of the hand outwards (alternatively phrased}, {this is pointing into the palm)"
            },
            {
                "HandPoser/HandRight",
                "A unit vector pointing to the right of the hand}, {if the hand is facing down. This is roughly the direction of the thumb on the left hand}, {and the other side of the hand from the thumb on the right hand."
            },
            { "HandPoser/Root", "The slot representing the thumb distal bone." },
            { "HandPoser/AssignFromRig", "This initializes the driver based on the rig details." },
            {
                "HandPoser/InitializeHand",
                "This populates every numeric field and drive field in the component based on the populated Root slots. This should not be pressed when someone is inside the avatar or the hands may crumple."
            },
            { "AvatarBadgeManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarBadgeManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarBadgeManager/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarLiveIndicator/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarLiveIndicator/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarLiveIndicator/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarNameTagAssigner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarNameTagAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarNameTagAssigner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarNameplateVisibilityDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarNameplateVisibilityDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarNameplateVisibilityDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarPoseBoxConstraint/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "AvatarPoseBoxConstraint/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseBoxConstraint/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarPoseOffset/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarPoseOffset/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseOffset/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarPoseRotationConstraint/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarPoseRotationConstraint/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseRotationConstraint/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarPoseSmoothLerp/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarPoseSmoothLerp/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseSmoothLerp/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarControllerInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarControllerInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarControllerInfo/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarDebugHand/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarDebugHand/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarDebugHand/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarDestroyOnDequip/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarDestroyOnDequip/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarDestroyOnDequip/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarGroup/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarGroup/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarGroup/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarManager/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarManager/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarNeckOffset/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarNeckOffset/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarNeckOffset/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarNodeAssigner/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarNodeAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarNodeAssigner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarObjectComponentProxy/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarObjectComponentProxy/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarObjectComponentProxy/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarObjectScale/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarObjectScale/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarObjectScale/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarObjectSlot/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarObjectSlot/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarObjectSlot/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarPoseFilterInstaller/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarPoseFilterInstaller/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseFilterInstaller/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarPoseNode/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarPoseNode/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarPoseNode/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarRawToolData/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarRawToolData/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarRawToolData/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarRenderSettings/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarRenderSettings/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarRenderSettings/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarRoot/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarRoot/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarRoot/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarSlotEquippedToggle/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarSlotEquippedToggle/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarSlotEquippedToggle/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarToolAnchor/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarToolAnchor/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarToolAnchor/Enabled", "Controls whether or not this component is enabled" },
            { "AvatarTrackingOffset/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarTrackingOffset/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarTrackingOffset/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarTrackingOffset/Offset",
                "The amount that your tracking position should be offset when in the avatar"
            },
            {
                "AvatarTrackingOffset/_user",
                "The user to which the offset is applied. This is set automatically when equipping an avatar with this component"
            },
            { "AvatarUserMeshHider/persistent", "Determines whether or not this item will be saved to the server." },
            { "AvatarUserMeshHider/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarUserMeshHider/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarUserReferenceAssigner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarUserReferenceAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarUserReferenceAssigner/Enabled", "Controls whether or not this component is enabled" },
            {
                "AvatarUserRootOverrideAssigner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "AvatarUserRootOverrideAssigner/UpdateOrder", "Controls the order in which this component is updated" },
            { "AvatarUserRootOverrideAssigner/Enabled", "Controls whether or not this component is enabled" },
            { "CommonAvatarBuilder/persistent", "Determines whether or not this item will be saved to the server." },
            { "CommonAvatarBuilder/UpdateOrder", "Controls the order in which this component is updated" },
            { "CommonAvatarBuilder/Enabled", "Controls whether or not this component is enabled" },
            {
                "CommonAvatarBuilder/AutoInject",
                "A slot that will automatically be duplicated and added as a child of an avatar when they join the world."
            },
            { "DefaultUserScale/persistent", "Determines whether or not this item will be saved to the server." },
            { "DefaultUserScale/UpdateOrder", "Controls the order in which this component is updated" },
            { "DefaultUserScale/Enabled", "Controls whether or not this component is enabled" },
            { "DefaultUserScale/SetOnEquip", "TBD" },
            { "DefaultUserScale/DefaultScale", "The default scale (normal value is 1)" },
            { "DefaultUserScale/_activeUser", "Internal" },
            {
                "NeosAvatarControllerSpawner/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "NeosAvatarControllerSpawner/UpdateOrder", "Controls the order in which this component is updated" },
            { "NeosAvatarControllerSpawner/Enabled", "Controls whether or not this component is enabled" },
            { "SimpleAvatarProtection/persistent", "Determines whether or not this item will be saved to the server." },
            { "SimpleAvatarProtection/UpdateOrder", "Controls the order in which this component is updated" },
            { "SimpleAvatarProtection/Enabled", "Controls whether or not this component is enabled" },
            { "SimpleAvatarProtection/User", "The user who is permitted to use the avatar." },
            { "SimpleAvatarProtection/_userId", "Internal" },
            { "CommonSpawnArea/persistent", "Determines whether or not this item will be saved to the server." },
            { "CommonSpawnArea/UpdateOrder", "Controls the order in which this component is updated" },
            { "CommonSpawnArea/Enabled", "Controls whether or not this component is enabled" },
            {
                "CommonSpawnArea/SpawnPointGenerator",
                "A PointGenerator component. This determines which points the spawn area will use for spawning new users."
            },
            {
                "CommonSpawnArea/OtherUserCheckRadius",
                "A minimum of how far away other users must be before a spawn point generated by SpawnPointGenerator is valid."
            },
            {
                "CommonSpawnArea/ParentUser",
                "If true}, {newly-spawned users will be parented to the slot holding this component."
            },
            {
                "CommonSpawnArea/OrientUser",
                "If true}, {newly-spawned users will be oriented towards the Z- axis that the slot holding this component is facing."
            },
            {
                "CommonSpawnArea/ScaleUser",
                "If true}, {newly-spawned users will be scaled to be the same scale as the slot holding this component. This can cause issues with parenting}, {so take care."
            },
            {
                "CommonSpawnArea/Capacity",
                "The maximum number of users that can be spawned in the slot holding this component at any given time. A value of -1 makes the maximum unlimited."
            },
            { "CommonToolStreamDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "CommonToolStreamDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "CommonToolStreamDriver/Enabled", "Controls whether or not this component is enabled" },
            {
                "EyeTrackingStreamManager/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "EyeTrackingStreamManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "EyeTrackingStreamManager/Enabled", "Controls whether or not this component is enabled" },
            {
                "FingerPoseStreamManager/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "FingerPoseStreamManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "FingerPoseStreamManager/Enabled", "Controls whether or not this component is enabled" },
            {
                "MouthTrackingStreamManager/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MouthTrackingStreamManager/UpdateOrder", "Controls the order in which this component is updated" },
            { "MouthTrackingStreamManager/Enabled", "Controls whether or not this component is enabled" },
            { "SimpleAwayIndicator/persistent", "Determines whether or not this item will be saved to the server." },
            { "SimpleAwayIndicator/UpdateOrder", "Controls the order in which this component is updated" },
            { "SimpleAwayIndicator/Enabled", "Controls whether or not this component is enabled" },
            { "SimpleUserSpawn/persistent", "Determines whether or not this item will be saved to the server." },
            { "SimpleUserSpawn/UpdateOrder", "Controls the order in which this component is updated" },
            { "SimpleUserSpawn/Enabled", "Controls whether or not this component is enabled" },
            { "SpawnArc/persistent", "Determines whether or not this item will be saved to the server." },
            { "SpawnArc/UpdateOrder", "Controls the order in which this component is updated" },
            { "SpawnArc/Enabled", "Controls whether or not this component is enabled" },
            {
                "TrackedDevicePositioner/persistent", "Determines whether or not this item will be saved to the server."
            },
            { "TrackedDevicePositioner/UpdateOrder", "Controls the order in which this component is updated" },
            { "TrackedDevicePositioner/Enabled", "Controls whether or not this component is enabled" },
            { "TrackerController/persistent", "Determines whether or not this item will be saved to the server." },
            { "TrackerController/UpdateOrder", "Controls the order in which this component is updated" },
            { "TrackerController/Enabled", "Controls whether or not this component is enabled" },
            { "TransformStreamDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "TransformStreamDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "TransformStreamDriver/Enabled", "Controls whether or not this component is enabled" },
            { "UserInfo/persistent", "Determines whether or not this item will be saved to the server." },
            { "UserInfo/UpdateOrder", "Controls the order in which this component is updated" },
            { "UserInfo/Enabled", "Controls whether or not this component is enabled" },
            { "UserJoinAudioIndicator/persistent", "Determines whether or not this item will be saved to the server." },
            { "UserJoinAudioIndicator/UpdateOrder", "Controls the order in which this component is updated" },
            { "UserJoinAudioIndicator/Enabled", "Controls whether or not this component is enabled" },
            { "UserRoot/persistent", "Determines whether or not this item will be saved to the server." },
            { "UserRoot/UpdateOrder", "Controls the order in which this component is updated" },
            { "UserRoot/Enabled", "Controls whether or not this component is enabled" },
            { "Hyperlink/persistent", "Determines whether or not this item will be saved to the server." },
            { "Hyperlink/UpdateOrder", "Controls the order in which this component is updated" },
            { "Hyperlink/Enabled", "Controls whether or not this component is enabled" },
            { "Hyperlink/URL", "The hyperlink to open." },
            {
                "Hyperlink/Reason",
                "The reason that the hyperlink is being opened. Displayed to the user when they click it in the security dialog."
            },
            {
                "MultiValueTextFormatDriver/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "MultiValueTextFormatDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "MultiValueTextFormatDriver/Enabled", "Controls whether or not this component is enabled" },
            { "MultiValueTextFormatDriver/Sources", "A list of source fields." },
            { "MultiValueTextFormatDriver/Format", "The format string." },
            { "MultiValueTextFormatDriver/Text", "The target field." },
            { "NeosVersion/persistent", "Determines whether or not this item will be saved to the server." },
            { "NeosVersion/UpdateOrder", "Controls the order in which this component is updated" },
            { "NeosVersion/Enabled", "Controls whether or not this component is enabled" },
            { "TipJar/persistent", "Determines whether or not this item will be saved to the server." },
            { "TipJar/UpdateOrder", "Controls the order in which this component is updated" },
            { "TipJar/Enabled", "Controls whether or not this component is enabled" },
            {
                "TipJar/RecipientId",
                "This can be set to the recipient of the tip when the component is activated. For example U-FakeUser."
            },
            {
                "TipJar/Token",
                "The type of token to be tipped can be set here. If no value is set the dialog that is created will offer the options of KFC and NCR."
            },
            { "ValueGraphRecorder/persistent", "Determines whether or not this item will be saved to the server." },
            { "ValueGraphRecorder/UpdateOrder", "Controls the order in which this component is updated" },
            { "ValueGraphRecorder/Enabled", "Controls whether or not this component is enabled" },
            { "ValueGraphRecorder/SourceValue", "The field that will be sampled for values." },
            {
                "ValueGraphRecorder/UpdateInterval",
                "The interval}, {in seconds}, {that the source field will be sampled at."
            },
            { "ValueGraphRecorder/Points", "The number of samples to retain." },
            {
                "ValueGraphRecorder/TargetArray",
                "The array to store samples in. Typically this will be the Values field in a StandaloneRectMesh<LineGraphMesh>."
            },
            {
                "ValueGraphRecorder/TargetArrayOffset",
                "The integer field containing the offset into the TargetArray to start storing samples at."
            },
            { "ValueTextFormatDriver/persistent", "Determines whether or not this item will be saved to the server." },
            { "ValueTextFormatDriver/UpdateOrder", "Controls the order in which this component is updated" },
            { "ValueTextFormatDriver/Enabled", "Controls whether or not this component is enabled" },
            { "ValueTextFormatDriver/Source", "The source field for the value." },
            { "ValueTextFormatDriver/Format", "The string format." },
            { "ValueTextFormatDriver/Text", "The target field." },
            {
                "ViolentAprilFoolsExplosion/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "ViolentAprilFoolsExplosion/UpdateOrder", "Controls the order in which this component is updated" },
            { "ViolentAprilFoolsExplosion/Enabled", "Controls whether or not this component is enabled" },
            { "ViolentAprilFoolsExplosion/BloatMagnitude", "Intensity of the bloat}, {prior to explosion" },
            { "ViolentAprilFoolsExplosion/_bloatingClip", "Automatically Assigned" },
            { "ViolentAprilFoolsExplosion/_explosionClip", "Automatically Assigned" },
            { "AssetLoadStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "AssetLoadStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "AssetLoadStatus/Enabled", "Controls whether or not this component is enabled" },
            { "MeshRendererLoadStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "MeshRendererLoadStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "MeshRendererLoadStatus/Enabled", "Controls whether or not this component is enabled" },
            {
                "CharacterColliderWorldLink/persistent",
                "Determines whether or not this item will be saved to the server."
            },
            { "CharacterColliderWorldLink/UpdateOrder", "Controls the order in which this component is updated" },
            { "CharacterColliderWorldLink/Enabled", "Controls whether or not this component is enabled" },
            { "FocusedWorldStatus/persistent", "Determines whether or not this item will be saved to the server." },
            { "FocusedWorldStatus/UpdateOrder", "Controls the order in which this component is updated" },
            { "FocusedWorldStatus/Enabled", "Controls whether or not this component is enabled" },
            { "SessionInfoSource/persistent", "Determines whether or not this item will be saved to the server." },
            { "SessionInfoSource/UpdateOrder", "Controls the order in which this component is updated" },
            { "SessionInfoSource/Enabled", "Controls whether or not this component is enabled" },
            { "TouchWorldLink/persistent", "Determines whether or not this item will be saved to the server." },
            { "TouchWorldLink/UpdateOrder", "Controls the order in which this component is updated" },
            { "TouchWorldLink/Enabled", "Controls whether or not this component is enabled" },
            { "WorldCloseAction/persistent", "Determines whether or not this item will be saved to the server." },
            { "WorldCloseAction/UpdateOrder", "Controls the order in which this component is updated" },
            { "WorldCloseAction/Enabled", "Controls whether or not this component is enabled" },
            { "WorldLink/persistent", "Determines whether or not this item will be saved to the server." },
            { "WorldLink/UpdateOrder", "Controls the order in which this component is updated" },
            { "WorldLink/Enabled", "Controls whether or not this component is enabled" },
            { "WorldOrb/persistent", "Determines whether or not this item will be saved to the server." },
            { "WorldOrb/UpdateOrder", "Controls the order in which this component is updated" },
            { "WorldOrb/Enabled", "Controls whether or not this component is enabled" }
        };
    }
}